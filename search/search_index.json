{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ol\u00e1, seja bem vindo ao meu portf\u00f3lio! Me chamo Leda e sou economista e mestra em gest\u00e3o p\u00fablica pela Universidade Federal de Alfenas. Deixarei dispon\u00edveis aqui algumas documenta\u00e7\u00f5es e dicas de materiais de estudo, desde excel avan\u00e7ado a algumas dicas da linguagem Python e conte\u00fados sobre investimentos e ingl\u00eas. Ser\u00e3o disponibizados ainda o meu curr\u00edculo Lattes e a minha disserta\u00e7\u00e3o de mestrado (\u00e9, o conte\u00fado aqui vai ser bem variado rs). Contato: GITHUB LINKEDIN TWITTER STACK OVERFLOW Outros documentos e materiais: Disserta\u00e7\u00e3o de mestrado Curr\u00edculo lattes For full documentation visit mkdocs.org .","title":"Home"},{"location":"#ola-seja-bem-vindo-ao-meu-portfolio","text":"Me chamo Leda e sou economista e mestra em gest\u00e3o p\u00fablica pela Universidade Federal de Alfenas. Deixarei dispon\u00edveis aqui algumas documenta\u00e7\u00f5es e dicas de materiais de estudo, desde excel avan\u00e7ado a algumas dicas da linguagem Python e conte\u00fados sobre investimentos e ingl\u00eas. Ser\u00e3o disponibizados ainda o meu curr\u00edculo Lattes e a minha disserta\u00e7\u00e3o de mestrado (\u00e9, o conte\u00fado aqui vai ser bem variado rs). Contato: GITHUB LINKEDIN TWITTER STACK OVERFLOW Outros documentos e materiais: Disserta\u00e7\u00e3o de mestrado Curr\u00edculo lattes For full documentation visit mkdocs.org .","title":"Ol\u00e1, seja bem vindo ao meu portf\u00f3lio!"},{"location":"analise/","text":"Nesta se\u00e7\u00e3o de an\u00e1lises de dados incluirei alguns exemplos de an\u00e1lises com dados reais. An\u00e1lise explorat\u00f3ria de dados (PNAD) Analisando a rela\u00e7\u00e3o entre escolaridade e rendimentos O exemplo a seguir \u00e9 de uma an\u00e1lise utilizando dados da Pesquisa Nacional por Amostra de Domic\u00edlios (PNAD). Esta an\u00e1lise foi feita para o primeiro artigo da minha disserta\u00e7\u00e3o de mestrado (que est\u00e1 dispon\u00edvel no link na p\u00e1gina inicial deste site). Importando os pacotes: In [1]: %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from openpyxl import load_workbook sns.set(style='whitegrid', palette='muted') In [2]: pnad3 = (pd.read_csv('dados/pnad.csv') .query('idade > 17') # incluir apenas quem j\u00e1 poderia ter conclu\u00eddo o ensino m\u00e9dio .query('freq_esc == 2')) # apenas quem n\u00e3o frequenta mais a escola pnad3['sexo'] = pnad3.sexo.astype('category') # transformando em categ\u00f3rica pnad3.sexo = pnad3.sexo.cat.rename_categories(['masculino', 'feminino']) In [3]: pnad3.nivel_instrucao.value_counts() Out[3]: 2.0 129671 5.0 106461 7.0 44608 1.0 43232 3.0 32718 4.0 19527 6.0 6754 In [4]: pnad3.nivel_instrucao = pnad3.nivel_instrucao.replace([4, 6], [3, 5]) pnad3['nivel_instrucao'] = pnad3.nivel_instrucao.astype('category') pnad3.nivel_instrucao.cat.rename_categories(['sem instru\u00e7\u00e3o', 'fundamental inc.', 'fundamental', 'm\u00e9dio', 'superior'], inplace=True) pnad3.nivel_instrucao.cat.as_ordered(inplace=True) In [5]: pnad3.nivel_instrucao.value_counts() Out[5]: fundamental inc. 129671 m\u00e9dio 113215 fundamental 52245 superior 44608 sem instru\u00e7\u00e3o 43232 In [6]: pnad4 = pnad3.query('nivel_instrucao == [\"fundamental\", \"m\u00e9dio\"]') # apenas quem possui ensino fundamental ou m\u00e9dio completo pnad4.nivel_instrucao.cat.remove_unused_categories(inplace=True) In [7]: pnad4.nivel_instrucao.value_counts() Out[7]: m\u00e9dio 113215 fundamental 52245 In [8]: nivel = (pnad3.nivel_instrucao.value_counts(normalize=True)*100).round(1) nivel = pd.DataFrame(nivel).reset_index().iloc[[4, 0, 2, 1, 3]] nivel.columns = ['n\u00edvel de instru\u00e7\u00e3o', '%'] nivel Out[8]: n\u00edvel de instru\u00e7\u00e3o % 4 sem instru\u00e7\u00e3o 11.3 0 fundamental inc. 33.9 2 fundamental 13.6 1 m\u00e9dio 29.6 3 superior 11.6 Ocupa\u00e7\u00f5es mais comuns (maiores de 17 que n\u00e3o frequentam a escola) In [9]: temp = (pnad4.query('nivel_instrucao == \"m\u00e9dio\"').ocup_cod .value_counts(normalize=True)*100).round(1) temp = pd.DataFrame(temp).reset_index() temp.columns = ['ocup_desc', 'm\u00e9dio'] temp = (pnad4.query('nivel_instrucao == \"m\u00e9dio\"').ocup_desc .value_counts(normalize=True)*100).round(1) temp = pd.DataFrame(temp).reset_index() temp.columns = ['ocup_desc', 'm\u00e9dio'] temp2 = (pnad4.query('nivel_instrucao == \"fundamental\"').ocup_desc .value_counts(normalize=True)*100).round(1) temp2 = pd.DataFrame(temp2).reset_index() temp2.columns = ['ocup_desc', 'fundamental'] temp3 = temp.merge(temp2) temp3['diferen\u00e7a'] = temp3.fundamental - temp3.m\u00e9dio In [10]: ocup_fund = temp3.sort_values('fundamental', ascending=False).head(10) ocup_fund Out[10]: ocup_desc m\u00e9dio fundamental diferen\u00e7a 3 trab_serv_domest 3.5 7.4 3.9 5 agricultor 2.3 4.8 2.5 10 pedreiros 1.9 4.7 2.8 4 trab_limp_interior_edif_esc_hotel 2.6 4.0 1.4 0 balc_vend_loja 6.8 3.8 -3.0 2 comerciante_loja 3.7 3.6 -0.1 14 criador_gado 1.5 3.2 1.7 8 cond_caminh\u00e3o_pesado 2.0 3.2 1.2 20 trab_element_agricult 1.2 3.1 1.9 25 trab_element_constr_edif 0.9 2.4 1.5 In [11]: ocup_med = temp3.sort_values('m\u00e9dio', ascending=False).head(10) ocup_med Out[11]: ocup_desc m\u00e9dio fundamental diferen\u00e7a 0 balc_vend_loja 6.8 3.8 -3.0 1 escriturario_geral 3.9 1.0 -2.9 2 comerciante_loja 3.7 3.6 -0.1 3 trab_serv_domest 3.5 7.4 3.9 4 trab_limp_interior_edif_esc_hotel 2.6 4.0 1.4 5 agricultor 2.3 4.8 2.5 6 guarda_seg 2.2 1.8 -0.4 7 cond_carro_taxi_caminhonete 2.2 1.9 -0.3 9 caixa_exped_bilhete 2.0 0.8 -1.2 8 cond_caminh\u00e3o_pesado 2.0 3.2 1.2 Rendimento m\u00e9dio de acordo com o n\u00edvel de instru\u00e7\u00e3o (maiores de 17 que n\u00e3o frequentam a escola) In [12]: pnad3.groupby('nivel_instrucao').rendimento.mean().plot.barh(color='gray', figsize=(7, 7)) plt.ylabel('') plt.xlabel('rendimento m\u00e9dio', labelpad = 20) plt.savefig('figuras/rendimento.png', bbox_inches='tight'); Out[13]: In [13]: pnad3.groupby('nivel_instrucao').rendimento.mean().round(0) Out[13]: nivel_instrucao sem instru\u00e7\u00e3o 806.0 fundamental inc. 1141.0 fundamental 1357.0 m\u00e9dio 1655.0 superior 4251.0 Rendimentos de acordo com o sexo e o n\u00edvel de instru\u00e7\u00e3o (maiores de 17 que n\u00e3o frequentam a escola e rendimentos menores do que 7 mil) In [14]: plt.figure(figsize=(11, 10)) sns.boxplot('rendimento', 'nivel_instrucao', hue='sexo', color = 'gray', data=pnad3.query('rendimento < 7000')) plt.xlabel('rendimento m\u00e9dio', labelpad = 20) plt.legend(bbox_to_anchor=(1,1)) plt.ylabel('') plt.savefig('figuras/sexo.png', bbox_inches='tight'); Out[14]: In [15]: pnad3.query('rendimento < 7000').groupby(['nivel_instrucao', 'sexo']).rendimento.median() Out[15]: nivel_instrucao sexo sem instru\u00e7\u00e3o masculino 700.0 feminino 500.0 fundamental inc. masculino 1000.0 feminino 930.0 fundamental masculino 1200.0 feminino 937.0 m\u00e9dio masculino 1500.0 feminino 1000.0 superior masculino 3000.0 feminino 2000.0 An\u00e1lise explorat\u00f3ria e an\u00e1lise de regress\u00e3o As an\u00e1lises a seguir se referem aos mesmos dados da an\u00e1lise apresentada anteriormente. A diferen\u00e7a \u00e9 que agora, al\u00e9m de uma an\u00e1lise explorat\u00f3ria, \u00e9 feita uma an\u00e1lise a partir de um modelo estat\u00edstico (modelo de regress\u00e3o linear m\u00faltipla, nesse caso). Esta \u00e9 uma t\u00e9cnica muito conhecida de machine learning. In [1]: %matplotlib inline import pandas as pd import numpy as np import scipy.stats as stats import statsmodels.formula.api as smf import statsmodels.api as sms from statsmodels.iolib.summary2 import summary_col from statsmodels.stats.outliers_influence import variance_inflation_factor import matplotlib.pyplot as plt import seaborn as sns pd.set_option('mode.chained_assignment', None) sns.set(style='whitegrid') In [2]: pnad1 = pd.read_csv('dados/pnad.csv') # pnadc 2tri 2017 pnad2 = pnad1.query('idade > 17') # apenas quem j\u00e1 poderia ter conclu\u00eddo o ensino m\u00e9dio pnad3 = pnad2.query('freq_esc == 2') pnad4 = pnad3.query('nivel_instrucao == [3, 5]') linha_vazia = pd.DataFrame([np.nan]).T pnad_zero = pnad4 pnad_zero.rendimento = pnad_zero.rendimento.fillna(0) # trab. familiares aux., quem recebe em esp\u00e9cie, desocupados, donas de casa, nem nem pnad = pnad4.query('rendimento > 0') pnad = pnad.assign(rendimento_log=np.log(pnad.rendimento)) In [2]: print(' in\u00edcio: ', pnad1.shape[0], '\\n', 'idade > 17: ', pnad2.shape[0], '\\n', 'n\u00e3o freqenta a escola: ', pnad3.shape[0], '\\n', 'fundamental ou m\u00e9dio: ', pnad4.shape[0], '\\n', 'rendimento > 0: ', pnad.shape[0]) Out[2]: in\u00edcio: 568313 idade > 17: 417664 n\u00e3o freqenta a escola: 382971 fundamental ou m\u00e9dio: 139179 rendimento > 0: 85122 In [3]: df = pnad1.query('idade > 25').nivel_instrucao.value_counts() / pnad1 .query('idade > 25').shape[0] In [4]: df[[1, 2, 3, 4]].sum() Out[4]: 0.5989869557558413 In [5]: pnad.groupby('nivel_instrucao').rendimento.describe(percentiles=[.9, .95, .99]) Out[5]: count mean std min 50% 90% 95% 99% max nivel_instrucao 3.0 18459.0 1389.439135 1832.573276 10.0 1100.0 2500.0 3000.0 6000.0 166666.0 5.0 66663.0 1595.003810 1657.389486 4.0 1200.0 3000.0 4000.0 7000.0 100000.0 Para facilitar a visualiza\u00e7\u00e3o, foram retiradas as observa\u00e7\u00f5es com valores mais altos (1% do ensino m\u00e9dio). In [6]: ocup_forca = pd.crosstab(pnad_zero.ocup_forca, pnad_zero.nivel_instrucao, normalize='columns').round(2) * 100 ocup_forca.index = ['sim', 'n\u00e3o'] ocup_forca = pd.concat([linha_vazia, ocup_forca]) rendimento = (pnad_zero.groupby('nivel_instrucao').rendimento.describe(percentiles=[.5]) .astype(int).T.iloc[1:, :]) rendimento.index = ['m\u00e9dia', 'desvio padr\u00e3o', 'm\u00ednimo', 'mediana', 'm\u00e1ximo'] idade = pnad_zero.groupby('nivel_instrucao').idade.describe(percentiles=[.5]).round(1) .T.iloc[1:, :] idade.index = ['m\u00e9dia', 'desvio padr\u00e3o', 'm\u00ednimo', 'mediana', 'm\u00e1ximo'] idade = pd.concat([linha_vazia, idade]) sexo = pd.crosstab(pnad_zero.sexo, pnad_zero.nivel_instrucao, normalize='columns') .round(2) * 100 sexo.index = ['masculino', 'feminino'] sexo = pd.concat([linha_vazia, sexo]) ocup_pos2 = pd.crosstab(pnad_zero.ocup_pos2, pnad_zero.nivel_instrucao, normalize='columns').round(4) * 100 ocup_pos2.index = ['empregado s. priv. c/ cart.', 'empregado s. priv. s/ cart.', 'trabalhador domest. c/ cart.', 'trabalhadores domest. s/ cart.', 'empregado s. pub. c/ cart.', 'empregado s. pub. s/ cart.', 'militar e servidor estatut\u00e1rio', 'empregador', 'trabalhador por conta pr\u00f3pria', 'trabalhador familiar auxiliar'] ocup_pos2 = pd.concat([linha_vazia, ocup_pos2]) resumo1 = (pd.concat([sexo, ocup_forca, ocup_pos2, idade, rendimento], keys=['Sexo', 'For\u00e7a de trabalho', 'Posi\u00e7\u00e3o na ocupa\u00e7\u00e3o', 'Idade', 'Rendimento']) .drop(0, axis=1)) resumo1.columns = ['Ensino fundamental', 'Ensino m\u00e9dio'] resumo1 Out[6]: Ensino fundamental Ensino m\u00e9dio 0 NaN NaN Sexo masculino 50.00 47.00 feminino 50.00 53.00 0 NaN NaN For\u00e7a de trabalho sim 66.00 75.00 n\u00e3o 34.00 25.00 0 NaN NaN Posi\u00e7\u00e3o na ocupa\u00e7\u00e3o empregado s. priv. c/ cart. 32.41 42.77 empregado s. priv. s/ cart. 12.55 10.08 trabalhador domest. c/ cart. 3.38 1.58 trabalhadores domest. s/ cart. 6.58 3.51 empregado s. pub. c/ cart. 0.48 1.20 empregado s. pub. s/ cart. 1.52 2.79 militar e servidor estatut\u00e1rio 3.03 8.22 empregador 4.21 4.31 trabalhador por conta pr\u00f3pria 32.10 22.91 trabalhador familiar auxiliar 3.72 2.62 0 NaN NaN Idade m\u00e9dia 43.00 37.60 desvio padr\u00e3o 15.50 14.30 m\u00ednimo 18.00 18.00 mediana 42.00 35.00 m\u00e1ximo 99.00 107.00 Rendimento m\u00e9dia 783.00 998.00 desvio padr\u00e3o 1539.00 1521.00 m\u00ednimo 0.00 0.00 mediana 450.00 937.00 m\u00e1ximo 166666.00 100000.00 In [7]: rendimento = (pnad.groupby('nivel_instrucao').rendimento.describe(percentiles=[.5]) .astype(int).T.iloc[1:, :]) rendimento.index = ['m\u00e9dia', 'desvio padr\u00e3o', 'm\u00ednimo', 'mediana', 'm\u00e1ximo'] idade = pnad.groupby('nivel_instrucao').idade.describe(percentiles=[.5]).round(1) .T.iloc[1:, :] idade.index = ['m\u00e9dia', 'desvio padr\u00e3o', 'm\u00ednimo', 'mediana', 'm\u00e1ximo'] idade = pd.concat([linha_vazia, idade]) sexo = pd.crosstab(pnad.sexo, pnad.nivel_instrucao, normalize='columns') .round(2)*100 sexo.index = ['masculino', 'feminino'] sexo = pd.concat([linha_vazia, sexo]) ocup_pos2 = pd.crosstab(pnad.ocup_pos2, pnad.nivel_instrucao, normalize='columns') .round(2)*100 ocup_pos2.index = ['empregado s. priv. c/ cart.', 'empregado s. priv. s/ cart.', 'trabalhador domest. c/ cart.', 'trabalhadores domest. s/ cart.', 'empregado s. pub. c/ cart.', 'empregado s. pub. s/ cart.', 'militar e servidor estatut\u00e1rio', 'empregador', 'trabalhador por conta pr\u00f3pria'] ocup_pos2 = pd.concat([linha_vazia, ocup_pos2]) resumo2 = (pd.concat([sexo, ocup_pos2, idade, rendimento], keys=['Sexo', 'Posi\u00e7\u00e3o na ocupa\u00e7\u00e3o', 'Idade', 'Rendimento']) .drop(0, axis=1)) resumo2.columns = ['Ensino fundamental', 'Ensino m\u00e9dio'] resumo2 Out[7]: Ensino fundamental Ensino m\u00e9dio 0 NaN NaN Sexo masculino 64.0 56.0 feminino 36.0 44.0 0 NaN NaN Posi\u00e7\u00e3o na ocupa\u00e7\u00e3o empregado s. priv. c/ cart. 34.0 44.0 empregado s. priv. s/ cart. 13.0 10.0 trabalhador domest. c/ cart. 4.0 2.0 trabalhadores domest. s/ cart. 7.0 4.0 empregado s. pub. c/ cart. 1.0 1.0 empregado s. pub. s/ cart. 2.0 3.0 militar e servidor estatut\u00e1rio 3.0 8.0 empregador 4.0 4.0 trabalhador por conta pr\u00f3pria 33.0 24.0 0 NaN NaN Idade m\u00e9dia 40.7 36.8 desvio padr\u00e3o 12.6 11.9 m\u00ednimo 18.0 18.0 mediana 40.0 35.0 m\u00e1ximo 88.0 107.0 Rendimento m\u00e9dia 1389.0 1595.0 desvio padr\u00e3o 1832.0 1657.0 m\u00ednimo 10.0 4.0 mediana 1100.0 1200.0 m\u00e1ximo 166666.0 100000.0 Modelos de regress\u00e3o In [8]: modelo1 = smf.ols('rendimento ~ C(nivel_instrucao)', data=pnad).fit(cov_type='HC0') modelo2 = smf.ols('rendimento ~ C(nivel_instrucao) + C(sexo)', data=pnad) .fit(cov_type='HC0') modelo3 = smf.ols('rendimento ~ C(nivel_instrucao) + C(sexo) + idade', data=pnad) .fit(cov_type='HC0') modelo4 = smf.ols('rendimento ~ C(nivel_instrucao) + C(sexo) + idade + C(tipo_area) + C(uf)', data=pnad).fit(cov_type='HC0') modelo5 = smf.ols('rendimento ~ C(nivel_instrucao) + C(sexo) + idade + C(tipo_area) + C(uf)', data=pnad.query('rendimento < 7000')) .fit(cov_type='HC0') modelo6 = smf.ols('rendimento ~ C(nivel_instrucao) + C(sexo) + idade + C(tipo_area) + C(uf)', data=pnad_zero.query('rendimento < 7000')) .fit(cov_type='HC0') lista = [modelo1, modelo2, modelo3, modelo4, modelo5, modelo6] strings = ['modelo1', 'modelo2', 'modelo3', 'modelo4', 'modelo5', 'modelo6'] info_dict={'R-squared' : lambda x: \"{:.2f}\".format(x.rsquared), 'No. observations' : lambda x: \"{0:d}\".format(int(x.nobs))} tabela = summary_col(results=[modelo1, modelo2, modelo3, modelo4, modelo5, modelo6], float_format='%0.2f', model_names=['Modelo 1', 'Modelo 2', 'Modelo 3', 'Modelo 4', 'Modelo 5', 'Modelo 6'], info_dict=info_dict, regressor_order=['Intercept', 'C(nivel_instrucao)[T.5.0]', 'C(sexo)[T.2]', 'idade']) tabela.add_title('Resultados das regress\u00f5es') print(tabela) Out[8]: Resultados das regress\u00f5es =============================================================================== Modelo 1 Modelo 2 Modelo 3 Modelo 4 Modelo 5 Modelo 6 ------------------------------------------------------------------------------- Intercept 1389.44 1608.27 421.48 593.12 791.65 1022.69 (13.49) (15.03) (22.80) (51.66) (27.11) (23.13) C(nivel_instrucao)[T.5.0] 205.56 255.81 370.55 390.54 313.08 247.93 (14.94) (14.73) (14.89) (14.84) (6.96) (5.75) C(sexo)[T.2] -605.43 -622.28 -621.16 -491.00 -624.34 (10.51) (10.43) (10.27) (5.77) (5.25) idade 29.31 27.95 19.61 2.91 (0.56) (0.56) (0.28) (0.19) C(tipo_area)[T.2] -119.62 -74.47 -63.21 (15.92) (9.78) (8.64) C(tipo_area)[T.3] -126.08 -113.95 -50.25 (46.09) (29.41) (25.59) C(tipo_area)[T.4] -155.51 -149.21 -113.51 (12.81) (7.57) (6.56) C(uf)[T.12] -232.92 -240.07 -227.61 (68.37) (33.18) (27.86) C(uf)[T.13] -365.92 -383.51 -339.03 (76.23) (29.66) (24.72) C(uf)[T.14] -133.83 -113.02 -90.93 (63.89) (39.65) (33.37) C(uf)[T.15] -295.12 -282.39 -215.17 (61.73) (28.92) (24.34) C(uf)[T.16] 163.45 -80.64 -160.69 (198.67) (46.53) (36.78) C(uf)[T.17] -61.94 -98.43 -107.63 (69.34) (34.76) (29.82) C(uf)[T.21] -409.75 -374.65 -339.82 (52.39) (26.70) (22.64) C(uf)[T.22] -344.83 -318.06 -250.81 (58.60) (32.78) (26.82) C(uf)[T.23] -449.65 -386.95 -315.40 (50.89) (27.03) (22.94) C(uf)[T.24] -370.28 -293.35 -256.09 (54.58) (31.85) (26.62) C(uf)[T.25] -383.93 -325.72 -262.32 (54.69) (31.24) (25.93) C(uf)[T.26] -330.66 -307.42 -299.42 (54.70) (28.54) (23.95) C(uf)[T.27] -338.04 -278.53 -304.69 (53.66) (29.07) (24.28) C(uf)[T.28] -212.63 -190.34 -191.11 (61.08) (34.94) (28.68) C(uf)[T.29] -383.05 -354.28 -271.71 (53.19) (27.58) (23.43) C(uf)[T.31] -22.60 -32.14 -1.90 (52.30) (26.35) (23.04) C(uf)[T.32] 45.94 29.26 -0.02 (55.17) (28.91) (25.16) C(uf)[T.33] -41.95 2.85 -76.09 (51.03) (26.51) (23.05) C(uf)[T.35] 153.48 162.41 120.14 (51.56) (26.19) (23.02) C(uf)[T.41] 241.58 219.75 231.28 (53.70) (27.49) (24.44) C(uf)[T.42] 410.28 421.08 369.57 (52.00) (26.98) (24.16) C(uf)[T.43] 252.37 212.87 208.25 (54.35) (27.77) (24.58) C(uf)[T.50] 242.22 182.67 215.63 (61.22) (32.85) (29.66) C(uf)[T.51] 197.23 184.80 173.18 (57.03) (31.50) (28.02) C(uf)[T.52] 102.61 89.90 120.61 (56.47) (29.78) (26.31) C(uf)[T.53] 323.20 183.23 109.22 (116.74) (35.49) (31.54) R-squared 0.00 0.03 0.08 0.10 0.20 0.15 No. observations 85122 85122 85122 85122 84147 138204 =============================================================================== Standard errors in parentheses. Modelo final Vari\u00e1veis Modelo 1 Modelo 2 Modelo 3 Modelo 4 Modelo 5 Modelo 6 Intercepto 1.389,44 1.608,27 421,48 593,12 791,65 1.022,69 (13,49) (15,03) (22,80) (51,66) (27,11) (23,13) N\u00edvel instru\u00e7\u00e3o (m\u00e9dio) 205,56 255,81 370,55 390,54 313,08 247,93 (14,94) (14,73) (14,89) (14,84) (6,96) (5,75) Sexo (feminino) -605,43 -622,28 -621,16 -491,00 -624,34 (10,51) (10,43) (10,27) (5,77) (5,25) Idade 29,31 27,95 19,61 2,91 (0,56) (0,56) (0,28) (0,19) Dummy tipo de \u00e1rea n\u00e3o n\u00e3o n\u00e3o sim sim sim Dummy UF n\u00e3o n\u00e3o n\u00e3o sim sim sim R2 0,00 0,03 0,08 0,10 0,20 0,15 N\u00ba de observa\u00e7\u00f5es 85.122 85.122 85.122 85.122 84.147 138.204 Esse modelo final \u00e9 um resumo do modelo anterior. Ele foi resumido com o intuito de facilitar o entendimento e a visualiza\u00e7\u00e3o dos dados. A interpreta\u00e7\u00e3o de cada um dos par\u00e2metros pode ser vista com detalhes na disserta\u00e7\u00e3o.","title":"An\u00e1lise de dados"},{"location":"analise/#analise-exploratoria-de-dados-pnad","text":"Analisando a rela\u00e7\u00e3o entre escolaridade e rendimentos O exemplo a seguir \u00e9 de uma an\u00e1lise utilizando dados da Pesquisa Nacional por Amostra de Domic\u00edlios (PNAD). Esta an\u00e1lise foi feita para o primeiro artigo da minha disserta\u00e7\u00e3o de mestrado (que est\u00e1 dispon\u00edvel no link na p\u00e1gina inicial deste site). Importando os pacotes: In [1]: %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from openpyxl import load_workbook sns.set(style='whitegrid', palette='muted') In [2]: pnad3 = (pd.read_csv('dados/pnad.csv') .query('idade > 17') # incluir apenas quem j\u00e1 poderia ter conclu\u00eddo o ensino m\u00e9dio .query('freq_esc == 2')) # apenas quem n\u00e3o frequenta mais a escola pnad3['sexo'] = pnad3.sexo.astype('category') # transformando em categ\u00f3rica pnad3.sexo = pnad3.sexo.cat.rename_categories(['masculino', 'feminino']) In [3]: pnad3.nivel_instrucao.value_counts() Out[3]: 2.0 129671 5.0 106461 7.0 44608 1.0 43232 3.0 32718 4.0 19527 6.0 6754 In [4]: pnad3.nivel_instrucao = pnad3.nivel_instrucao.replace([4, 6], [3, 5]) pnad3['nivel_instrucao'] = pnad3.nivel_instrucao.astype('category') pnad3.nivel_instrucao.cat.rename_categories(['sem instru\u00e7\u00e3o', 'fundamental inc.', 'fundamental', 'm\u00e9dio', 'superior'], inplace=True) pnad3.nivel_instrucao.cat.as_ordered(inplace=True) In [5]: pnad3.nivel_instrucao.value_counts() Out[5]: fundamental inc. 129671 m\u00e9dio 113215 fundamental 52245 superior 44608 sem instru\u00e7\u00e3o 43232 In [6]: pnad4 = pnad3.query('nivel_instrucao == [\"fundamental\", \"m\u00e9dio\"]') # apenas quem possui ensino fundamental ou m\u00e9dio completo pnad4.nivel_instrucao.cat.remove_unused_categories(inplace=True) In [7]: pnad4.nivel_instrucao.value_counts() Out[7]: m\u00e9dio 113215 fundamental 52245 In [8]: nivel = (pnad3.nivel_instrucao.value_counts(normalize=True)*100).round(1) nivel = pd.DataFrame(nivel).reset_index().iloc[[4, 0, 2, 1, 3]] nivel.columns = ['n\u00edvel de instru\u00e7\u00e3o', '%'] nivel Out[8]: n\u00edvel de instru\u00e7\u00e3o % 4 sem instru\u00e7\u00e3o 11.3 0 fundamental inc. 33.9 2 fundamental 13.6 1 m\u00e9dio 29.6 3 superior 11.6 Ocupa\u00e7\u00f5es mais comuns (maiores de 17 que n\u00e3o frequentam a escola) In [9]: temp = (pnad4.query('nivel_instrucao == \"m\u00e9dio\"').ocup_cod .value_counts(normalize=True)*100).round(1) temp = pd.DataFrame(temp).reset_index() temp.columns = ['ocup_desc', 'm\u00e9dio'] temp = (pnad4.query('nivel_instrucao == \"m\u00e9dio\"').ocup_desc .value_counts(normalize=True)*100).round(1) temp = pd.DataFrame(temp).reset_index() temp.columns = ['ocup_desc', 'm\u00e9dio'] temp2 = (pnad4.query('nivel_instrucao == \"fundamental\"').ocup_desc .value_counts(normalize=True)*100).round(1) temp2 = pd.DataFrame(temp2).reset_index() temp2.columns = ['ocup_desc', 'fundamental'] temp3 = temp.merge(temp2) temp3['diferen\u00e7a'] = temp3.fundamental - temp3.m\u00e9dio In [10]: ocup_fund = temp3.sort_values('fundamental', ascending=False).head(10) ocup_fund Out[10]: ocup_desc m\u00e9dio fundamental diferen\u00e7a 3 trab_serv_domest 3.5 7.4 3.9 5 agricultor 2.3 4.8 2.5 10 pedreiros 1.9 4.7 2.8 4 trab_limp_interior_edif_esc_hotel 2.6 4.0 1.4 0 balc_vend_loja 6.8 3.8 -3.0 2 comerciante_loja 3.7 3.6 -0.1 14 criador_gado 1.5 3.2 1.7 8 cond_caminh\u00e3o_pesado 2.0 3.2 1.2 20 trab_element_agricult 1.2 3.1 1.9 25 trab_element_constr_edif 0.9 2.4 1.5 In [11]: ocup_med = temp3.sort_values('m\u00e9dio', ascending=False).head(10) ocup_med Out[11]: ocup_desc m\u00e9dio fundamental diferen\u00e7a 0 balc_vend_loja 6.8 3.8 -3.0 1 escriturario_geral 3.9 1.0 -2.9 2 comerciante_loja 3.7 3.6 -0.1 3 trab_serv_domest 3.5 7.4 3.9 4 trab_limp_interior_edif_esc_hotel 2.6 4.0 1.4 5 agricultor 2.3 4.8 2.5 6 guarda_seg 2.2 1.8 -0.4 7 cond_carro_taxi_caminhonete 2.2 1.9 -0.3 9 caixa_exped_bilhete 2.0 0.8 -1.2 8 cond_caminh\u00e3o_pesado 2.0 3.2 1.2 Rendimento m\u00e9dio de acordo com o n\u00edvel de instru\u00e7\u00e3o (maiores de 17 que n\u00e3o frequentam a escola) In [12]: pnad3.groupby('nivel_instrucao').rendimento.mean().plot.barh(color='gray', figsize=(7, 7)) plt.ylabel('') plt.xlabel('rendimento m\u00e9dio', labelpad = 20) plt.savefig('figuras/rendimento.png', bbox_inches='tight'); Out[13]: In [13]: pnad3.groupby('nivel_instrucao').rendimento.mean().round(0) Out[13]: nivel_instrucao sem instru\u00e7\u00e3o 806.0 fundamental inc. 1141.0 fundamental 1357.0 m\u00e9dio 1655.0 superior 4251.0 Rendimentos de acordo com o sexo e o n\u00edvel de instru\u00e7\u00e3o (maiores de 17 que n\u00e3o frequentam a escola e rendimentos menores do que 7 mil) In [14]: plt.figure(figsize=(11, 10)) sns.boxplot('rendimento', 'nivel_instrucao', hue='sexo', color = 'gray', data=pnad3.query('rendimento < 7000')) plt.xlabel('rendimento m\u00e9dio', labelpad = 20) plt.legend(bbox_to_anchor=(1,1)) plt.ylabel('') plt.savefig('figuras/sexo.png', bbox_inches='tight'); Out[14]: In [15]: pnad3.query('rendimento < 7000').groupby(['nivel_instrucao', 'sexo']).rendimento.median() Out[15]: nivel_instrucao sexo sem instru\u00e7\u00e3o masculino 700.0 feminino 500.0 fundamental inc. masculino 1000.0 feminino 930.0 fundamental masculino 1200.0 feminino 937.0 m\u00e9dio masculino 1500.0 feminino 1000.0 superior masculino 3000.0 feminino 2000.0","title":"An\u00e1lise explorat\u00f3ria de dados (PNAD)"},{"location":"analise/#analise-exploratoria-e-analise-de-regressao","text":"As an\u00e1lises a seguir se referem aos mesmos dados da an\u00e1lise apresentada anteriormente. A diferen\u00e7a \u00e9 que agora, al\u00e9m de uma an\u00e1lise explorat\u00f3ria, \u00e9 feita uma an\u00e1lise a partir de um modelo estat\u00edstico (modelo de regress\u00e3o linear m\u00faltipla, nesse caso). Esta \u00e9 uma t\u00e9cnica muito conhecida de machine learning. In [1]: %matplotlib inline import pandas as pd import numpy as np import scipy.stats as stats import statsmodels.formula.api as smf import statsmodels.api as sms from statsmodels.iolib.summary2 import summary_col from statsmodels.stats.outliers_influence import variance_inflation_factor import matplotlib.pyplot as plt import seaborn as sns pd.set_option('mode.chained_assignment', None) sns.set(style='whitegrid') In [2]: pnad1 = pd.read_csv('dados/pnad.csv') # pnadc 2tri 2017 pnad2 = pnad1.query('idade > 17') # apenas quem j\u00e1 poderia ter conclu\u00eddo o ensino m\u00e9dio pnad3 = pnad2.query('freq_esc == 2') pnad4 = pnad3.query('nivel_instrucao == [3, 5]') linha_vazia = pd.DataFrame([np.nan]).T pnad_zero = pnad4 pnad_zero.rendimento = pnad_zero.rendimento.fillna(0) # trab. familiares aux., quem recebe em esp\u00e9cie, desocupados, donas de casa, nem nem pnad = pnad4.query('rendimento > 0') pnad = pnad.assign(rendimento_log=np.log(pnad.rendimento)) In [2]: print(' in\u00edcio: ', pnad1.shape[0], '\\n', 'idade > 17: ', pnad2.shape[0], '\\n', 'n\u00e3o freqenta a escola: ', pnad3.shape[0], '\\n', 'fundamental ou m\u00e9dio: ', pnad4.shape[0], '\\n', 'rendimento > 0: ', pnad.shape[0]) Out[2]: in\u00edcio: 568313 idade > 17: 417664 n\u00e3o freqenta a escola: 382971 fundamental ou m\u00e9dio: 139179 rendimento > 0: 85122 In [3]: df = pnad1.query('idade > 25').nivel_instrucao.value_counts() / pnad1 .query('idade > 25').shape[0] In [4]: df[[1, 2, 3, 4]].sum() Out[4]: 0.5989869557558413 In [5]: pnad.groupby('nivel_instrucao').rendimento.describe(percentiles=[.9, .95, .99]) Out[5]: count mean std min 50% 90% 95% 99% max nivel_instrucao 3.0 18459.0 1389.439135 1832.573276 10.0 1100.0 2500.0 3000.0 6000.0 166666.0 5.0 66663.0 1595.003810 1657.389486 4.0 1200.0 3000.0 4000.0 7000.0 100000.0 Para facilitar a visualiza\u00e7\u00e3o, foram retiradas as observa\u00e7\u00f5es com valores mais altos (1% do ensino m\u00e9dio). In [6]: ocup_forca = pd.crosstab(pnad_zero.ocup_forca, pnad_zero.nivel_instrucao, normalize='columns').round(2) * 100 ocup_forca.index = ['sim', 'n\u00e3o'] ocup_forca = pd.concat([linha_vazia, ocup_forca]) rendimento = (pnad_zero.groupby('nivel_instrucao').rendimento.describe(percentiles=[.5]) .astype(int).T.iloc[1:, :]) rendimento.index = ['m\u00e9dia', 'desvio padr\u00e3o', 'm\u00ednimo', 'mediana', 'm\u00e1ximo'] idade = pnad_zero.groupby('nivel_instrucao').idade.describe(percentiles=[.5]).round(1) .T.iloc[1:, :] idade.index = ['m\u00e9dia', 'desvio padr\u00e3o', 'm\u00ednimo', 'mediana', 'm\u00e1ximo'] idade = pd.concat([linha_vazia, idade]) sexo = pd.crosstab(pnad_zero.sexo, pnad_zero.nivel_instrucao, normalize='columns') .round(2) * 100 sexo.index = ['masculino', 'feminino'] sexo = pd.concat([linha_vazia, sexo]) ocup_pos2 = pd.crosstab(pnad_zero.ocup_pos2, pnad_zero.nivel_instrucao, normalize='columns').round(4) * 100 ocup_pos2.index = ['empregado s. priv. c/ cart.', 'empregado s. priv. s/ cart.', 'trabalhador domest. c/ cart.', 'trabalhadores domest. s/ cart.', 'empregado s. pub. c/ cart.', 'empregado s. pub. s/ cart.', 'militar e servidor estatut\u00e1rio', 'empregador', 'trabalhador por conta pr\u00f3pria', 'trabalhador familiar auxiliar'] ocup_pos2 = pd.concat([linha_vazia, ocup_pos2]) resumo1 = (pd.concat([sexo, ocup_forca, ocup_pos2, idade, rendimento], keys=['Sexo', 'For\u00e7a de trabalho', 'Posi\u00e7\u00e3o na ocupa\u00e7\u00e3o', 'Idade', 'Rendimento']) .drop(0, axis=1)) resumo1.columns = ['Ensino fundamental', 'Ensino m\u00e9dio'] resumo1 Out[6]: Ensino fundamental Ensino m\u00e9dio 0 NaN NaN Sexo masculino 50.00 47.00 feminino 50.00 53.00 0 NaN NaN For\u00e7a de trabalho sim 66.00 75.00 n\u00e3o 34.00 25.00 0 NaN NaN Posi\u00e7\u00e3o na ocupa\u00e7\u00e3o empregado s. priv. c/ cart. 32.41 42.77 empregado s. priv. s/ cart. 12.55 10.08 trabalhador domest. c/ cart. 3.38 1.58 trabalhadores domest. s/ cart. 6.58 3.51 empregado s. pub. c/ cart. 0.48 1.20 empregado s. pub. s/ cart. 1.52 2.79 militar e servidor estatut\u00e1rio 3.03 8.22 empregador 4.21 4.31 trabalhador por conta pr\u00f3pria 32.10 22.91 trabalhador familiar auxiliar 3.72 2.62 0 NaN NaN Idade m\u00e9dia 43.00 37.60 desvio padr\u00e3o 15.50 14.30 m\u00ednimo 18.00 18.00 mediana 42.00 35.00 m\u00e1ximo 99.00 107.00 Rendimento m\u00e9dia 783.00 998.00 desvio padr\u00e3o 1539.00 1521.00 m\u00ednimo 0.00 0.00 mediana 450.00 937.00 m\u00e1ximo 166666.00 100000.00 In [7]: rendimento = (pnad.groupby('nivel_instrucao').rendimento.describe(percentiles=[.5]) .astype(int).T.iloc[1:, :]) rendimento.index = ['m\u00e9dia', 'desvio padr\u00e3o', 'm\u00ednimo', 'mediana', 'm\u00e1ximo'] idade = pnad.groupby('nivel_instrucao').idade.describe(percentiles=[.5]).round(1) .T.iloc[1:, :] idade.index = ['m\u00e9dia', 'desvio padr\u00e3o', 'm\u00ednimo', 'mediana', 'm\u00e1ximo'] idade = pd.concat([linha_vazia, idade]) sexo = pd.crosstab(pnad.sexo, pnad.nivel_instrucao, normalize='columns') .round(2)*100 sexo.index = ['masculino', 'feminino'] sexo = pd.concat([linha_vazia, sexo]) ocup_pos2 = pd.crosstab(pnad.ocup_pos2, pnad.nivel_instrucao, normalize='columns') .round(2)*100 ocup_pos2.index = ['empregado s. priv. c/ cart.', 'empregado s. priv. s/ cart.', 'trabalhador domest. c/ cart.', 'trabalhadores domest. s/ cart.', 'empregado s. pub. c/ cart.', 'empregado s. pub. s/ cart.', 'militar e servidor estatut\u00e1rio', 'empregador', 'trabalhador por conta pr\u00f3pria'] ocup_pos2 = pd.concat([linha_vazia, ocup_pos2]) resumo2 = (pd.concat([sexo, ocup_pos2, idade, rendimento], keys=['Sexo', 'Posi\u00e7\u00e3o na ocupa\u00e7\u00e3o', 'Idade', 'Rendimento']) .drop(0, axis=1)) resumo2.columns = ['Ensino fundamental', 'Ensino m\u00e9dio'] resumo2 Out[7]: Ensino fundamental Ensino m\u00e9dio 0 NaN NaN Sexo masculino 64.0 56.0 feminino 36.0 44.0 0 NaN NaN Posi\u00e7\u00e3o na ocupa\u00e7\u00e3o empregado s. priv. c/ cart. 34.0 44.0 empregado s. priv. s/ cart. 13.0 10.0 trabalhador domest. c/ cart. 4.0 2.0 trabalhadores domest. s/ cart. 7.0 4.0 empregado s. pub. c/ cart. 1.0 1.0 empregado s. pub. s/ cart. 2.0 3.0 militar e servidor estatut\u00e1rio 3.0 8.0 empregador 4.0 4.0 trabalhador por conta pr\u00f3pria 33.0 24.0 0 NaN NaN Idade m\u00e9dia 40.7 36.8 desvio padr\u00e3o 12.6 11.9 m\u00ednimo 18.0 18.0 mediana 40.0 35.0 m\u00e1ximo 88.0 107.0 Rendimento m\u00e9dia 1389.0 1595.0 desvio padr\u00e3o 1832.0 1657.0 m\u00ednimo 10.0 4.0 mediana 1100.0 1200.0 m\u00e1ximo 166666.0 100000.0 Modelos de regress\u00e3o In [8]: modelo1 = smf.ols('rendimento ~ C(nivel_instrucao)', data=pnad).fit(cov_type='HC0') modelo2 = smf.ols('rendimento ~ C(nivel_instrucao) + C(sexo)', data=pnad) .fit(cov_type='HC0') modelo3 = smf.ols('rendimento ~ C(nivel_instrucao) + C(sexo) + idade', data=pnad) .fit(cov_type='HC0') modelo4 = smf.ols('rendimento ~ C(nivel_instrucao) + C(sexo) + idade + C(tipo_area) + C(uf)', data=pnad).fit(cov_type='HC0') modelo5 = smf.ols('rendimento ~ C(nivel_instrucao) + C(sexo) + idade + C(tipo_area) + C(uf)', data=pnad.query('rendimento < 7000')) .fit(cov_type='HC0') modelo6 = smf.ols('rendimento ~ C(nivel_instrucao) + C(sexo) + idade + C(tipo_area) + C(uf)', data=pnad_zero.query('rendimento < 7000')) .fit(cov_type='HC0') lista = [modelo1, modelo2, modelo3, modelo4, modelo5, modelo6] strings = ['modelo1', 'modelo2', 'modelo3', 'modelo4', 'modelo5', 'modelo6'] info_dict={'R-squared' : lambda x: \"{:.2f}\".format(x.rsquared), 'No. observations' : lambda x: \"{0:d}\".format(int(x.nobs))} tabela = summary_col(results=[modelo1, modelo2, modelo3, modelo4, modelo5, modelo6], float_format='%0.2f', model_names=['Modelo 1', 'Modelo 2', 'Modelo 3', 'Modelo 4', 'Modelo 5', 'Modelo 6'], info_dict=info_dict, regressor_order=['Intercept', 'C(nivel_instrucao)[T.5.0]', 'C(sexo)[T.2]', 'idade']) tabela.add_title('Resultados das regress\u00f5es') print(tabela) Out[8]: Resultados das regress\u00f5es =============================================================================== Modelo 1 Modelo 2 Modelo 3 Modelo 4 Modelo 5 Modelo 6 ------------------------------------------------------------------------------- Intercept 1389.44 1608.27 421.48 593.12 791.65 1022.69 (13.49) (15.03) (22.80) (51.66) (27.11) (23.13) C(nivel_instrucao)[T.5.0] 205.56 255.81 370.55 390.54 313.08 247.93 (14.94) (14.73) (14.89) (14.84) (6.96) (5.75) C(sexo)[T.2] -605.43 -622.28 -621.16 -491.00 -624.34 (10.51) (10.43) (10.27) (5.77) (5.25) idade 29.31 27.95 19.61 2.91 (0.56) (0.56) (0.28) (0.19) C(tipo_area)[T.2] -119.62 -74.47 -63.21 (15.92) (9.78) (8.64) C(tipo_area)[T.3] -126.08 -113.95 -50.25 (46.09) (29.41) (25.59) C(tipo_area)[T.4] -155.51 -149.21 -113.51 (12.81) (7.57) (6.56) C(uf)[T.12] -232.92 -240.07 -227.61 (68.37) (33.18) (27.86) C(uf)[T.13] -365.92 -383.51 -339.03 (76.23) (29.66) (24.72) C(uf)[T.14] -133.83 -113.02 -90.93 (63.89) (39.65) (33.37) C(uf)[T.15] -295.12 -282.39 -215.17 (61.73) (28.92) (24.34) C(uf)[T.16] 163.45 -80.64 -160.69 (198.67) (46.53) (36.78) C(uf)[T.17] -61.94 -98.43 -107.63 (69.34) (34.76) (29.82) C(uf)[T.21] -409.75 -374.65 -339.82 (52.39) (26.70) (22.64) C(uf)[T.22] -344.83 -318.06 -250.81 (58.60) (32.78) (26.82) C(uf)[T.23] -449.65 -386.95 -315.40 (50.89) (27.03) (22.94) C(uf)[T.24] -370.28 -293.35 -256.09 (54.58) (31.85) (26.62) C(uf)[T.25] -383.93 -325.72 -262.32 (54.69) (31.24) (25.93) C(uf)[T.26] -330.66 -307.42 -299.42 (54.70) (28.54) (23.95) C(uf)[T.27] -338.04 -278.53 -304.69 (53.66) (29.07) (24.28) C(uf)[T.28] -212.63 -190.34 -191.11 (61.08) (34.94) (28.68) C(uf)[T.29] -383.05 -354.28 -271.71 (53.19) (27.58) (23.43) C(uf)[T.31] -22.60 -32.14 -1.90 (52.30) (26.35) (23.04) C(uf)[T.32] 45.94 29.26 -0.02 (55.17) (28.91) (25.16) C(uf)[T.33] -41.95 2.85 -76.09 (51.03) (26.51) (23.05) C(uf)[T.35] 153.48 162.41 120.14 (51.56) (26.19) (23.02) C(uf)[T.41] 241.58 219.75 231.28 (53.70) (27.49) (24.44) C(uf)[T.42] 410.28 421.08 369.57 (52.00) (26.98) (24.16) C(uf)[T.43] 252.37 212.87 208.25 (54.35) (27.77) (24.58) C(uf)[T.50] 242.22 182.67 215.63 (61.22) (32.85) (29.66) C(uf)[T.51] 197.23 184.80 173.18 (57.03) (31.50) (28.02) C(uf)[T.52] 102.61 89.90 120.61 (56.47) (29.78) (26.31) C(uf)[T.53] 323.20 183.23 109.22 (116.74) (35.49) (31.54) R-squared 0.00 0.03 0.08 0.10 0.20 0.15 No. observations 85122 85122 85122 85122 84147 138204 =============================================================================== Standard errors in parentheses. Modelo final Vari\u00e1veis Modelo 1 Modelo 2 Modelo 3 Modelo 4 Modelo 5 Modelo 6 Intercepto 1.389,44 1.608,27 421,48 593,12 791,65 1.022,69 (13,49) (15,03) (22,80) (51,66) (27,11) (23,13) N\u00edvel instru\u00e7\u00e3o (m\u00e9dio) 205,56 255,81 370,55 390,54 313,08 247,93 (14,94) (14,73) (14,89) (14,84) (6,96) (5,75) Sexo (feminino) -605,43 -622,28 -621,16 -491,00 -624,34 (10,51) (10,43) (10,27) (5,77) (5,25) Idade 29,31 27,95 19,61 2,91 (0,56) (0,56) (0,28) (0,19) Dummy tipo de \u00e1rea n\u00e3o n\u00e3o n\u00e3o sim sim sim Dummy UF n\u00e3o n\u00e3o n\u00e3o sim sim sim R2 0,00 0,03 0,08 0,10 0,20 0,15 N\u00ba de observa\u00e7\u00f5es 85.122 85.122 85.122 85.122 84.147 138.204 Esse modelo final \u00e9 um resumo do modelo anterior. Ele foi resumido com o intuito de facilitar o entendimento e a visualiza\u00e7\u00e3o dos dados. A interpreta\u00e7\u00e3o de cada um dos par\u00e2metros pode ser vista com detalhes na disserta\u00e7\u00e3o.","title":"An\u00e1lise explorat\u00f3ria e an\u00e1lise de regress\u00e3o"},{"location":"cpa-20/","text":"Se voc\u00ea chegou at\u00e9 aqui, voc\u00ea deve ter uma ideia do que \u00e9 a CPA-20. A sigla significa Certifica\u00e7\u00e3o Profissional Anbima e esta \u00e9 uma certifica\u00e7\u00e3o b\u00e1sica para quem quer entrar no mercado financeiro e trabalhar com a distribui\u00e7\u00e3o de produtos de investimentos. Irei disponibilizar aqui conte\u00fados que caem na prova e dicas de estudo. Em primeiro lugar, \u00e9 importante saber que h\u00e1 muito material gratuito dispon\u00edvel online. O grande F\u00e1bio Louzada disponibiliza diversas lives e quest\u00f5es sobre o assunto. O site e o aplicativo da TopInvest tamb\u00e9m t\u00eam muito conte\u00fado bacana. Al\u00e9m disso, voc\u00ea pode ir no youtube e pesquisar por \"cpa-20 edgar abreu\" que voc\u00ea vai encontrar diversas v\u00eddeo-aulas sobre cada um dos m\u00f3dulos cobrados na prova. [em constru\u00e7\u00e3o]","title":"CPA-20"},{"location":"economics/","text":"Em constru\u00e7\u00e3o.","title":"Economia"},{"location":"excel/","text":"Excel avan\u00e7ado (vers\u00e3o 2010): Aqui veremos algumas fun\u00e7\u00f5es mais avan\u00e7adas do Excel, assim como algumas dicas de atalhos que podem ser utilizados e a descri\u00e7\u00e3o dos principais erros que podem ocorrer. Ent\u00e3o vamos l\u00e1! 1. PROCV e PROCH Suponha que voc\u00ea tenha uma lista de n\u00fameros de localiza\u00e7\u00e3o do Office e precisa saber quais funcion\u00e1rios est\u00e3o em cada escrit\u00f3rio. A planilha \u00e9 grande, portanto, voc\u00ea pode pensar que \u00e9 uma tarefa desafiadora. Na verdade, \u00e9 muito f\u00e1cil fazer com uma fun\u00e7\u00e3o proc. Aqui est\u00e1 um exemplo de como usar PROCV. =PROCV(B2,C2:E7,3,VERDADEIRO) Neste exemplo, B2 \u00e9 o primeiro argumento, que \u00e9 o valor que voc\u00ea deseja encontrar. Esse argumento pode ser uma refer\u00eancia de c\u00e9lula ou um valor fixo, como \"Smith\" ou 21.000. O segundo argumento \u00e9 o intervalo de c\u00e9lulas, C2:E7 , no qual pesquisar o valor que voc\u00ea deseja encontrar. O terceiro argumento \u00e9 a coluna nesse intervalo de c\u00e9lulas que cont\u00e9m o valor que voc\u00ea busca. O quarto argumento \u00e9 opcional. Insira verdadeiro ou falso. Se voc\u00ea inserir verdadeiro ou deixar o argumento em branco, a fun\u00e7\u00e3o retornar\u00e1 uma correspond\u00eancia aproximada do valor especificado no primeiro argumento. Se voc\u00ea inserir falso , a fun\u00e7\u00e3o corresponder\u00e1 ao valor fornecido pelo primeiro argumento. Em outras palavras, deixar o quarto argumento em branco \u2014 ou inserir verdadeiro \u2014 oferece mais flexibilidade. Vamos para um exemplo. Vamos ent\u00e3o para um exemplo de PROCH. Bom, a fun\u00e7\u00e3o PROCH localiza um valor na linha superior de uma tabela ou matriz de valores e retorna um valor na mesma coluna de uma linha especificada na tabela ou matriz. Voc\u00ea deve usar PROCH quando seus valores de compara\u00e7\u00e3o estiverem localizados em uma linha ao longo da parte superior de uma tabela de dados e voc\u00ea quiser observar um n\u00famero espec\u00edfico de linhas mais abaixo. Quando os valores de compara\u00e7\u00e3o estiverem em uma coluna \u00e0 esquerda dos dados que voc\u00ea deseja localizar, use PROCV . 2. Fun\u00e7\u00e3o \u00cdndice A fun\u00e7\u00e3o \u00edndice \u00e9 usada para retornar um valor ou a refer\u00eancia a um valor de dentro de uma tabela ou intervalo. Esta fun\u00e7\u00e3o possui duas formas: a matricial e a referencial. Veremos cada uma delas a seguir. 2.1 Matricial A forma matricial da fun\u00e7\u00e3o \u00edndice retorna o valor de um elemento em uma tabela ou uma matriz, selecionado pelos \u00edndices de n\u00famero de linha e coluna (nesta ordem: primeiro a linha e depois a coluna). A f\u00f3rmula possui dois argumentos obrigat\u00f3rios e um opcional: - o primeiro argumento \u00e9 o intervalo de c\u00e9lulas da constante ou matriz; - o segundo \u00e9 o n\u00famero da linha (se ficar em branco, o n\u00famero da coluna deve ser preenchido); - o terceiro (opcional) \u00e9 o n\u00famero da coluna. A forma matricial deve ser usada se o primeiro argumento de \u00cdNDICE for uma constante de matriz. Veja um exemplo a seguir. 2.2 Referencial A fun\u00e7\u00e3o \u00edndice referencial retorna a refer\u00eancia da c\u00e9lula na interse\u00e7\u00e3o de linha e coluna espec\u00edficas. Se a refer\u00eancia for composta de sele\u00e7\u00f5es n\u00e3o adjacentes, voc\u00ea poder\u00e1 escolher a sele\u00e7\u00e3o que deseja examinar. Esta vers\u00e3o da fun\u00e7\u00e3o \u00edndice permite que voc\u00ea selecione mais de uma \u00e1rea (ou seja, pode ser usada tamb\u00e9m com mais de uma tabela). A f\u00f3rmula \u00e9 composta por dois argumentos obrigat\u00f3rios: - uma refer\u00eancia a um ou mais intervalos de c\u00e9lula; - o n\u00famero da linha de onde ser\u00e1 fornecidade uma refer\u00eancia; O n\u00famero da coluna e da \u00e1rea s\u00e3o opcionais. 3. Fun\u00e7\u00e3o Corresp A fun\u00e7\u00e3o Corresp procura um item especificado em um intervalo de c\u00e9lulas e retorna a posi\u00e7\u00e3o relativa desse item no intervalo. Por exemplo, se o intervalo A1:A3 contiver os valores 5, 25 e 38, a f\u00f3rmula =CORRESP(25,A1:A3,0) retornar\u00e1 o n\u00famero 2, porque 25 \u00e9 o segundo item no intervalo. Dica: Use Corresp no lugar de uma das fun\u00e7\u00f5es PROC quando voc\u00ea precisar da posi\u00e7\u00e3o de um item em um intervalo em vez do item propriamente dito. Por exemplo, voc\u00ea pode usar a fun\u00e7\u00e3o CORRESP para fornecer um valor para o argumento n\u00fam_lin da fun\u00e7\u00e3o \u00cdNDICE. A sintaxe \u00e9 composta por dois argumentos obrigat\u00f3rios e um argumento opcional: - o primeiro argumento \u00e9 o valor procurado por voc\u00ea, que pode ser um n\u00famero, texto ou valor l\u00f3gico. - o segundo item \u00e9 a matriz procurada, ou seja, o intervalo de c\u00e9lulas a serem pesquisadas. - o terceiro item (opcional) \u00e9 o tipo de correspond\u00eancia, que especifica como o excel faz a correspond\u00eancia do valor procurado. O valor padr\u00e3o para este argumento \u00e9 1. Segue um exemplo: Tipo de correspond\u00eancia Comportamento 1 ou n\u00e3o especificado CORRESP localiza o maior valor que \u00e9 menor do que ou igual a valor procurado. Os valores no argumento matriz procurada devem ser colocados em ordem crescente; por exemplo: ...-2, -1, 0, 1, 2, ..., A-Z, FALSO, VERDADEIRO. 0 CORRESP localiza o primeiro valor que \u00e9 exatamente igual a valor procurado. Os valores no argumento matriz procurada podem estar em qualquer ordem. -1 CORRESP localiza o menor valor que \u00e9 maior ou igual ao valor procurado. Os valores no argumento matriz_procurada devem ser colocados em ordem decrescente como, por exemplo: VERDADEIRO, FALSO, Z-A... 2, 1, 0, -1, -2... e assim por diante. 4. Combinando as fun\u00e7\u00f5es \u00cdndice e Corresp Como vimos anteriormente, os argumentos da fun\u00e7\u00e3o \u00edndice representam a posi\u00e7\u00e3o de um dado em c\u00e9lulas organizadas em uma mesma linha, ou em uma mesma coluna, ou seja, justamente o que a fun\u00e7\u00e3o Corresp faz. Assim podemos incluir o Corresp nestes argumentos da fun\u00e7\u00e3o \u00edndice. A tabela abaixo cont\u00e9m alguns dados sobre a popula\u00e7\u00e3o dos pa\u00edses membros do BRICS e queremos descobrir qual dos pa\u00edses tem o percentual de popula\u00e7\u00e3o feminina igual a 48,29%. matriz \u2192 B6:B10 = \u00e1rea onde est\u00e3o os dados com os nomes dos pa\u00edses. n\u00fam_linha \u2192 fun\u00e7\u00e3o CORRESP valor_procurado \u2192 C2 = c\u00e9lula onde est\u00e1 o valor do indicador que queremos a informa\u00e7\u00e3o. matriz_procurada \u2192 F6:F10 = intervalo onde est\u00e3o os dados do indicador desejado. [tipo_correspond\u00eancia] \u2192 0 (zero), pois \u00e9 o valor que indica a fun\u00e7\u00e3o que queremos uma correspond\u00eancia exata. [n\u00fam_coluna] \u2192 N\u00e3o aparece na fun\u00e7\u00e3o. Se trata de um dado opcional e desnecess\u00e1rio neste caso, j\u00e1 que a \u00e1rea que selecionamos em matriz possui somente uma coluna. Deixar esse argumento em branco ou com o valor 1, d\u00e1 na mesma. Ent\u00e3o, resumindo, o que dissemos para esta f\u00f3rmula fazer foi: No intervalo de B6:B10, retorne o dado que estiver na mesma posi\u00e7\u00e3o que o valor 48,29% est\u00e1 no intervalo de F6:F10. Ou seja, retorne o dado que estiver na 3\u00aa posi\u00e7\u00e3o no intervalo de B6:B10. O resultado dessa f\u00f3rmula \u00e9 \u00cdndia, pois \u00e9 o pa\u00eds com 48,29% de popula\u00e7\u00e3o feminina. Fonte da quest\u00e3o aqui . 5. Fun\u00e7\u00e3o Somase A fun\u00e7\u00e3o somase \u00e9 utilizada para somar os valores em um intervalo que atendem aos crit\u00e9rios estabelecidos. Por exemplo, imagine que em uma coluna voc\u00ea precisa somar apenas os valores maiores do que 100. Voc\u00ea pode fazer isso usando a f\u00f3rmula =SOMASE(C2:C11;\">100\") . Note que o primeiro argumento da f\u00f3rmula simplesmente define o intervalo escolhido e o segundo argumento define a condi\u00e7\u00e3o estabelecida por voc\u00ea. A seguir temos um exemplo de como usar essa fun\u00e7\u00e3o: Outro exemplo: 6. Fun\u00e7\u00e3o Cont.se Esta fun\u00e7\u00e3o \u00e9 usada para contar o n\u00famero de c\u00e9lulas que atendem a um determinado crit\u00e9rio. A fun\u00e7\u00e3o \u00e9 composta por dois argumentos: - o primeiro argumento \u00e9 o intervalo onde voc\u00ea quer procurar algo. - o segundo argumento \u00e9 o seu crit\u00e9rio. Por exemplo, CONT.SE(A2:A5;\"ma\u00e7\u00e3s\") . Este e outros exemplos podem ser observados a seguir: 7. Fun\u00e7\u00e3o Cont.ses A fun\u00e7\u00e3o cont.ses aplica crit\u00e9rios a c\u00e9lulas em v\u00e1rios intervalos e conta o n\u00famero de vezes que todos os crit\u00e9rios s\u00e3o atendidos. A sintaxe da fun\u00e7\u00e3o tem dois argumentos obrigat\u00f3rios: - O primeiro argumento \u00e9 o intervalo no qual iremos avaliar os crit\u00e9rios estabelecidos. - O segundo argumento trata dos crit\u00e9rios que devem ser avaliados. Al\u00e9m disso, podem ser adicionados outros crit\u00e9rios, sendo permitidos at\u00e9 127 crit\u00e9rios ou intervalos. Seguem um exemplo: Outro exemplo: Observa\u00e7\u00e3o: Se voc\u00ea pretende fazer a contagem usando um \u00fanico crit\u00e9rio, use a fun\u00e7\u00e3o cont.se , j\u00e1 abordada anteriormente. 8. Gr\u00e1ficos 9. Tabela Din\u00e2mica Uma Tabela Din\u00e2mica \u00e9 uma ferramenta poderosa para calcular, resumir e analisar os dados que lhe permitem ver compara\u00e7\u00f5es, padr\u00f5es e tend\u00eancias nos dados. O primeiro passo para criar uma Tabela Din\u00e2mica \u00e9 selecionar os dados a partir dos quais voc\u00ea quer criar a tabela. Os dados selecionados n\u00e3o podem ter colunas ou linhas vazias e deve haver uma linha \u00fanica para os t\u00edtulos. Depois de selecionados os dados, clique em inserir > tabela din\u00e2mica . Em Tabela/Intervalo , verifique o intervalo de c\u00e9lulas. Em Escolha onde deseja que o relat\u00f3rio da Tabela Din\u00e2mica seja posicionado , selecione Nova Planilha para posicionar a Tabela Din\u00e2mica em uma nova planilha, ou escolha Planilha Existente e selecione o local em que deseja exibir a Tabela Din\u00e2mica. Selecione ok . Depois disso, no lado direito de sua tela, selecione os dados que voc\u00ea quer inserir na tabela e observe como ela foi criada automaticamente. Se necess\u00e1rio, mude os itens nos campos dispon\u00edveis no canto inferior direito de forma que a tabela fa\u00e7a mais sentido/seja mais f\u00e1cil de interpretar. A seguir est\u00e1 um exemplo (\u00e0 esquerda est\u00e3o os dados sem nenhuma formata\u00e7\u00e3o ou edi\u00e7\u00e3o e \u00e0 direita est\u00e1 a tabela din\u00e2mica): 10. Gr\u00e1fico Din\u00e2mico Os Gr\u00e1ficos Din\u00e2micos s\u00e3o uma \u00f3tima maneira de adicionar visualiza\u00e7\u00f5es aos dados, j\u00e1 que os dados em formato de gr\u00e1fico geralmente s\u00e3o muito mais intuitivos do que os mesmos em tabelas. Para adicionar um gr\u00e1fico din\u00e2mico, os passos s\u00e3o basicamente os mesmos da tabela din\u00e2mica. Primeiro selecione os dados, depois clique em inserir > gr\u00e1fico din\u00e2mico . Em Tabela/Intervalo , verifique o intervalo de c\u00e9lulas. Em Escolha o local no qual deseja que a tabela e o gr\u00e1fico din\u00e2micos sejam colocados , selecione Nova Planilha para posicion\u00e1-los em uma nova planilha, ou escolha Planilha Existente e selecione o local em que deseja exibi-los. Selecione ok . Depois disso, no lado direito de sua tela, selecione os dados que voc\u00ea quer inserir no gr\u00e1fico e mude os itens nos campos dispon\u00edveis no canto inferior direito de forma que seu gr\u00e1fico fa\u00e7a mais sentido/seja mais f\u00e1cil de interpretar. A seguir est\u00e1 um exemplo de gr\u00e1fico din\u00e2mico juntamente com a tabela que deu origem ao mesmo. 11. Dashboard Um dashboard \u00e9 uma representa\u00e7\u00e3o visual de m\u00e9tricas de chave que lhe permitem rapidamente ver e analisar os seus dados num \u00fanico local. Dashboards apenas n\u00e3o fornecem vistas de dados consolidados, mas os utilizadores ir\u00e3o conseguir filtrar os dados para apresentar apenas o que \u00e9 importante. 12. Guia Desenvolvedor 13. Macros a) Bot\u00f5es para Macros b) Habilitar Macros c) Salvar pasta de trabalho d) Criando uma Macro no VBE Atalhos: 1. Selecionar linhas e colunas: Primeira op\u00e7\u00e3o: clicar no n\u00famero da linha ou no nome da coluna. Segunda op\u00e7\u00e3o: parar na coluna de interesse e usar ctrl e espa\u00e7o (seleciona a coluna inteira); ou parar na linda de interesse e pressionar shift + espa\u00e7o (seleciona a linha inteira). 2. Inserir linhas: Primeira op\u00e7\u00e3o: clicar no n\u00famero da linha e clicar em Inserir ou clicar no n\u00famero da linha e digitar i . Segunda op\u00e7\u00e3o: selecionar a linha abaixo da qual voc\u00ea pretende inserir uma nova linha (lembre-se da primeira dica: selecione a linha utilizando o atalho shift + espa\u00e7o ). Depois que a linha estiver selecionada, pressione ctrl + + (caso n\u00e3o tenha o + separado no seu teclado, pressione ctrl + shift + + ). Dica adicional: caso voc\u00ea queira incluir mais de uma linha, basta selecionar o n\u00famero de linhas que voc\u00ea quer incluir segurando a tecla shift e indo com a seta para baixo ou para cima e depois usar o atalho para inserir as linhas ( ctrl + + ). O mesmo vale para as colunas. 3. Apagar linhas: Para apagar a linha, o atalho segue a mesma ideia da dica anterior: selecione a linha e pressione ctrl + - . 4. Andando pelas c\u00e9lulas da planilha: Se voc\u00ea tem uma planilha com muitos dados e quer andar entre as c\u00e9lulas, h\u00e1 alguns atalhos \u00fateis para isso: Para ir para a \u00faltima linha: ctrl + seta para baixo ; Para ir para a primeiro linha: ctrl + seta para cima ; Para ir para a primeira coluna: ctrl + seta para a esquerda ; Para ir para a \u00faltima coluna: ctrl + seta para a direita ; Para ir para a primeira c\u00e9lula da planilha (A1): ctrl + home . 5. Selecionando linhas e colunas: Usando os mesmos atalhos da dica 4 juntamente com a tecla shift , \u00e9 poss\u00edvel selecionar v\u00e1rias linhas e v\u00e1rias colunas. Ex.: para selecionar uma linha inteira (a partir da c\u00e9lula em que voc\u00ea est\u00e1), pressione ctrl + shift + seta para cima ou seta para baixo . O mesmo vale para selecionar v\u00e1rias colunas. Use os mesmos atalhos combinados com as setas para os lados. Se a inten\u00e7\u00e3o \u00e9 selecionar toda a sua planilha, pressione ctrl + * . No caso de laptops, o * costuma ficar acima do n\u00famero 8. Ent\u00e3o o atalho \u00e9: ctrl + shift + 8 . 6. Aumentando a altura das linhas: Selecione todas as linhas. Lembra do nosso atalho para isso? Nesse caso, basta selecionar a primeira linha com o atalho shift + espa\u00e7o e depois selecionar at\u00e9 a \u00faltima linha com o atalho ctrl + shift + seta para baixo . Caso ache mais f\u00e1cil, selecione tudo com o mouse ou marque a primeira linha e pressione shift + seta para baixo at\u00e9 chegar na linha desejada. Depois, v\u00e1 com o cursor at\u00e9 a linha entre os n\u00fameros das linhas. O cursor vai virar uma pequena cruz. Selecione e puxe para baixo deixando a linha do tamanho desejado. Com isso, todas as linhas ficar\u00e3o com a mesma altura. 7. Preenchendo as c\u00e9lulas automaticamente: Se voc\u00ea precisa enumerar algumas c\u00e9lulas do n\u00famero 1 ao 100, por exemplo, voc\u00ea j\u00e1 sabe que pode inserir o n\u00famero 1 em uma c\u00e9lula, o n\u00famero 2 na c\u00e9lula seguinte, selecionar as duas, clicar com o mouse no canto inferior direito da c\u00e9lula de baixo e puxar para baixo, certo? Com isso, as pr\u00f3ximas c\u00e9lulas ser\u00e3o preenchidas automaticamente at\u00e9 o n\u00famero que voc\u00ea deseja. Por\u00e9m, se voc\u00ea colocar o indicador ordinal, assim: 1\u00ba, 2\u00ba, 3\u00ba etc. esse atalho n\u00e3o funciona mais, pois o tipo da c\u00e9lula muda. Qual a solu\u00e7\u00e3o ent\u00e3o? Terei que digitar tudo at\u00e9 o 100 ou at\u00e9 o 500, 700, dependendo do caso? N\u00e3o. Tem uma forma muito mais simples. Vamos l\u00e1! Primeiro fa\u00e7a normalmente o primeiro passo (digitar os dois primeiros n\u00fameros, selecionar e puxar at\u00e9 o n\u00famero desejado). Com isso, todos os n\u00fameros estar\u00e3o selecionados. Se n\u00e3o estiverem, selecione-os. Ent\u00e3o pressione ctrl + 1 e a aba de formata\u00e7\u00e3o de c\u00e9lulas ser\u00e1 aberta (outro atalho bacana, olha s\u00f3!). Clique em personalizado , depois escolha o n\u00famero 0 (ele provavelmente estar\u00e1 como geral ). Agora edite o tipo adicionando \"\u00ba\" (o s\u00edmbolo de grau entre aspas) na frente do n\u00famero e clique em ok . Pronto! Parece complicado, mas \u00e9 muito simples. \u00c9 s\u00f3 seguir esses passos e a sua lista de n\u00fameros ordinais est\u00e1 pronta! Ah, e caso voc\u00ea queira adicionar mais n\u00fameros, agora \u00e9 s\u00f3 selecionar e puxar para baixo que vai funcionar normalmente. 8. Tabela zebrada: Primeiro selecione a sua tabela ( ctrl + * ), depois clique em formata\u00e7\u00e3o condicional e em nova regra . Escolha a \u00faltima op\u00e7\u00e3o da lista ( Usar uma f\u00f3rmula para determinar quais c\u00e9lulas devem ser formatadas ). Agora clique na caixa de texto logo abaixo e digite: =MOD(LIN();2)=0 . O pr\u00f3ximo passo \u00e9 clicar em formatar ainda nesta janela. Com isso, uma nova janela ser\u00e1 aberta. Selecione a op\u00e7\u00e3o preenchimento e escolha a cor desejada. Prontinho! Sua planilha agora tem uma linha de cada cor. Inclusive, voc\u00ea pode adicionar mais linhas que o padr\u00e3o ser\u00e1 mantido. Erros comuns no Excel","title":"Excel"},{"location":"excel/#excel-avancado-versao-2010","text":"Aqui veremos algumas fun\u00e7\u00f5es mais avan\u00e7adas do Excel, assim como algumas dicas de atalhos que podem ser utilizados e a descri\u00e7\u00e3o dos principais erros que podem ocorrer. Ent\u00e3o vamos l\u00e1!","title":"Excel avan\u00e7ado (vers\u00e3o 2010):"},{"location":"excel/#1-procv-e-proch","text":"Suponha que voc\u00ea tenha uma lista de n\u00fameros de localiza\u00e7\u00e3o do Office e precisa saber quais funcion\u00e1rios est\u00e3o em cada escrit\u00f3rio. A planilha \u00e9 grande, portanto, voc\u00ea pode pensar que \u00e9 uma tarefa desafiadora. Na verdade, \u00e9 muito f\u00e1cil fazer com uma fun\u00e7\u00e3o proc. Aqui est\u00e1 um exemplo de como usar PROCV. =PROCV(B2,C2:E7,3,VERDADEIRO) Neste exemplo, B2 \u00e9 o primeiro argumento, que \u00e9 o valor que voc\u00ea deseja encontrar. Esse argumento pode ser uma refer\u00eancia de c\u00e9lula ou um valor fixo, como \"Smith\" ou 21.000. O segundo argumento \u00e9 o intervalo de c\u00e9lulas, C2:E7 , no qual pesquisar o valor que voc\u00ea deseja encontrar. O terceiro argumento \u00e9 a coluna nesse intervalo de c\u00e9lulas que cont\u00e9m o valor que voc\u00ea busca. O quarto argumento \u00e9 opcional. Insira verdadeiro ou falso. Se voc\u00ea inserir verdadeiro ou deixar o argumento em branco, a fun\u00e7\u00e3o retornar\u00e1 uma correspond\u00eancia aproximada do valor especificado no primeiro argumento. Se voc\u00ea inserir falso , a fun\u00e7\u00e3o corresponder\u00e1 ao valor fornecido pelo primeiro argumento. Em outras palavras, deixar o quarto argumento em branco \u2014 ou inserir verdadeiro \u2014 oferece mais flexibilidade. Vamos para um exemplo. Vamos ent\u00e3o para um exemplo de PROCH. Bom, a fun\u00e7\u00e3o PROCH localiza um valor na linha superior de uma tabela ou matriz de valores e retorna um valor na mesma coluna de uma linha especificada na tabela ou matriz. Voc\u00ea deve usar PROCH quando seus valores de compara\u00e7\u00e3o estiverem localizados em uma linha ao longo da parte superior de uma tabela de dados e voc\u00ea quiser observar um n\u00famero espec\u00edfico de linhas mais abaixo. Quando os valores de compara\u00e7\u00e3o estiverem em uma coluna \u00e0 esquerda dos dados que voc\u00ea deseja localizar, use PROCV .","title":"1. PROCV e PROCH"},{"location":"excel/#2-funcao-indice","text":"A fun\u00e7\u00e3o \u00edndice \u00e9 usada para retornar um valor ou a refer\u00eancia a um valor de dentro de uma tabela ou intervalo. Esta fun\u00e7\u00e3o possui duas formas: a matricial e a referencial. Veremos cada uma delas a seguir.","title":"2. Fun\u00e7\u00e3o \u00cdndice"},{"location":"excel/#21-matricial","text":"A forma matricial da fun\u00e7\u00e3o \u00edndice retorna o valor de um elemento em uma tabela ou uma matriz, selecionado pelos \u00edndices de n\u00famero de linha e coluna (nesta ordem: primeiro a linha e depois a coluna). A f\u00f3rmula possui dois argumentos obrigat\u00f3rios e um opcional: - o primeiro argumento \u00e9 o intervalo de c\u00e9lulas da constante ou matriz; - o segundo \u00e9 o n\u00famero da linha (se ficar em branco, o n\u00famero da coluna deve ser preenchido); - o terceiro (opcional) \u00e9 o n\u00famero da coluna. A forma matricial deve ser usada se o primeiro argumento de \u00cdNDICE for uma constante de matriz. Veja um exemplo a seguir.","title":"2.1 Matricial"},{"location":"excel/#22-referencial","text":"A fun\u00e7\u00e3o \u00edndice referencial retorna a refer\u00eancia da c\u00e9lula na interse\u00e7\u00e3o de linha e coluna espec\u00edficas. Se a refer\u00eancia for composta de sele\u00e7\u00f5es n\u00e3o adjacentes, voc\u00ea poder\u00e1 escolher a sele\u00e7\u00e3o que deseja examinar. Esta vers\u00e3o da fun\u00e7\u00e3o \u00edndice permite que voc\u00ea selecione mais de uma \u00e1rea (ou seja, pode ser usada tamb\u00e9m com mais de uma tabela). A f\u00f3rmula \u00e9 composta por dois argumentos obrigat\u00f3rios: - uma refer\u00eancia a um ou mais intervalos de c\u00e9lula; - o n\u00famero da linha de onde ser\u00e1 fornecidade uma refer\u00eancia; O n\u00famero da coluna e da \u00e1rea s\u00e3o opcionais.","title":"2.2 Referencial"},{"location":"excel/#3-funcao-corresp","text":"A fun\u00e7\u00e3o Corresp procura um item especificado em um intervalo de c\u00e9lulas e retorna a posi\u00e7\u00e3o relativa desse item no intervalo. Por exemplo, se o intervalo A1:A3 contiver os valores 5, 25 e 38, a f\u00f3rmula =CORRESP(25,A1:A3,0) retornar\u00e1 o n\u00famero 2, porque 25 \u00e9 o segundo item no intervalo. Dica: Use Corresp no lugar de uma das fun\u00e7\u00f5es PROC quando voc\u00ea precisar da posi\u00e7\u00e3o de um item em um intervalo em vez do item propriamente dito. Por exemplo, voc\u00ea pode usar a fun\u00e7\u00e3o CORRESP para fornecer um valor para o argumento n\u00fam_lin da fun\u00e7\u00e3o \u00cdNDICE. A sintaxe \u00e9 composta por dois argumentos obrigat\u00f3rios e um argumento opcional: - o primeiro argumento \u00e9 o valor procurado por voc\u00ea, que pode ser um n\u00famero, texto ou valor l\u00f3gico. - o segundo item \u00e9 a matriz procurada, ou seja, o intervalo de c\u00e9lulas a serem pesquisadas. - o terceiro item (opcional) \u00e9 o tipo de correspond\u00eancia, que especifica como o excel faz a correspond\u00eancia do valor procurado. O valor padr\u00e3o para este argumento \u00e9 1. Segue um exemplo: Tipo de correspond\u00eancia Comportamento 1 ou n\u00e3o especificado CORRESP localiza o maior valor que \u00e9 menor do que ou igual a valor procurado. Os valores no argumento matriz procurada devem ser colocados em ordem crescente; por exemplo: ...-2, -1, 0, 1, 2, ..., A-Z, FALSO, VERDADEIRO. 0 CORRESP localiza o primeiro valor que \u00e9 exatamente igual a valor procurado. Os valores no argumento matriz procurada podem estar em qualquer ordem. -1 CORRESP localiza o menor valor que \u00e9 maior ou igual ao valor procurado. Os valores no argumento matriz_procurada devem ser colocados em ordem decrescente como, por exemplo: VERDADEIRO, FALSO, Z-A... 2, 1, 0, -1, -2... e assim por diante.","title":"3. Fun\u00e7\u00e3o Corresp"},{"location":"excel/#4-combinando-as-funcoes-indice-e-corresp","text":"Como vimos anteriormente, os argumentos da fun\u00e7\u00e3o \u00edndice representam a posi\u00e7\u00e3o de um dado em c\u00e9lulas organizadas em uma mesma linha, ou em uma mesma coluna, ou seja, justamente o que a fun\u00e7\u00e3o Corresp faz. Assim podemos incluir o Corresp nestes argumentos da fun\u00e7\u00e3o \u00edndice. A tabela abaixo cont\u00e9m alguns dados sobre a popula\u00e7\u00e3o dos pa\u00edses membros do BRICS e queremos descobrir qual dos pa\u00edses tem o percentual de popula\u00e7\u00e3o feminina igual a 48,29%. matriz \u2192 B6:B10 = \u00e1rea onde est\u00e3o os dados com os nomes dos pa\u00edses. n\u00fam_linha \u2192 fun\u00e7\u00e3o CORRESP valor_procurado \u2192 C2 = c\u00e9lula onde est\u00e1 o valor do indicador que queremos a informa\u00e7\u00e3o. matriz_procurada \u2192 F6:F10 = intervalo onde est\u00e3o os dados do indicador desejado. [tipo_correspond\u00eancia] \u2192 0 (zero), pois \u00e9 o valor que indica a fun\u00e7\u00e3o que queremos uma correspond\u00eancia exata. [n\u00fam_coluna] \u2192 N\u00e3o aparece na fun\u00e7\u00e3o. Se trata de um dado opcional e desnecess\u00e1rio neste caso, j\u00e1 que a \u00e1rea que selecionamos em matriz possui somente uma coluna. Deixar esse argumento em branco ou com o valor 1, d\u00e1 na mesma. Ent\u00e3o, resumindo, o que dissemos para esta f\u00f3rmula fazer foi: No intervalo de B6:B10, retorne o dado que estiver na mesma posi\u00e7\u00e3o que o valor 48,29% est\u00e1 no intervalo de F6:F10. Ou seja, retorne o dado que estiver na 3\u00aa posi\u00e7\u00e3o no intervalo de B6:B10. O resultado dessa f\u00f3rmula \u00e9 \u00cdndia, pois \u00e9 o pa\u00eds com 48,29% de popula\u00e7\u00e3o feminina. Fonte da quest\u00e3o aqui .","title":"4. Combinando as fun\u00e7\u00f5es \u00cdndice e Corresp"},{"location":"excel/#5-funcao-somase","text":"A fun\u00e7\u00e3o somase \u00e9 utilizada para somar os valores em um intervalo que atendem aos crit\u00e9rios estabelecidos. Por exemplo, imagine que em uma coluna voc\u00ea precisa somar apenas os valores maiores do que 100. Voc\u00ea pode fazer isso usando a f\u00f3rmula =SOMASE(C2:C11;\">100\") . Note que o primeiro argumento da f\u00f3rmula simplesmente define o intervalo escolhido e o segundo argumento define a condi\u00e7\u00e3o estabelecida por voc\u00ea. A seguir temos um exemplo de como usar essa fun\u00e7\u00e3o: Outro exemplo:","title":"5. Fun\u00e7\u00e3o Somase"},{"location":"excel/#6-funcao-contse","text":"Esta fun\u00e7\u00e3o \u00e9 usada para contar o n\u00famero de c\u00e9lulas que atendem a um determinado crit\u00e9rio. A fun\u00e7\u00e3o \u00e9 composta por dois argumentos: - o primeiro argumento \u00e9 o intervalo onde voc\u00ea quer procurar algo. - o segundo argumento \u00e9 o seu crit\u00e9rio. Por exemplo, CONT.SE(A2:A5;\"ma\u00e7\u00e3s\") . Este e outros exemplos podem ser observados a seguir:","title":"6. Fun\u00e7\u00e3o Cont.se"},{"location":"excel/#7-funcao-contses","text":"A fun\u00e7\u00e3o cont.ses aplica crit\u00e9rios a c\u00e9lulas em v\u00e1rios intervalos e conta o n\u00famero de vezes que todos os crit\u00e9rios s\u00e3o atendidos. A sintaxe da fun\u00e7\u00e3o tem dois argumentos obrigat\u00f3rios: - O primeiro argumento \u00e9 o intervalo no qual iremos avaliar os crit\u00e9rios estabelecidos. - O segundo argumento trata dos crit\u00e9rios que devem ser avaliados. Al\u00e9m disso, podem ser adicionados outros crit\u00e9rios, sendo permitidos at\u00e9 127 crit\u00e9rios ou intervalos. Seguem um exemplo: Outro exemplo: Observa\u00e7\u00e3o: Se voc\u00ea pretende fazer a contagem usando um \u00fanico crit\u00e9rio, use a fun\u00e7\u00e3o cont.se , j\u00e1 abordada anteriormente.","title":"7. Fun\u00e7\u00e3o Cont.ses"},{"location":"excel/#8-graficos","text":"","title":"8. Gr\u00e1ficos"},{"location":"excel/#9-tabela-dinamica","text":"Uma Tabela Din\u00e2mica \u00e9 uma ferramenta poderosa para calcular, resumir e analisar os dados que lhe permitem ver compara\u00e7\u00f5es, padr\u00f5es e tend\u00eancias nos dados. O primeiro passo para criar uma Tabela Din\u00e2mica \u00e9 selecionar os dados a partir dos quais voc\u00ea quer criar a tabela. Os dados selecionados n\u00e3o podem ter colunas ou linhas vazias e deve haver uma linha \u00fanica para os t\u00edtulos. Depois de selecionados os dados, clique em inserir > tabela din\u00e2mica . Em Tabela/Intervalo , verifique o intervalo de c\u00e9lulas. Em Escolha onde deseja que o relat\u00f3rio da Tabela Din\u00e2mica seja posicionado , selecione Nova Planilha para posicionar a Tabela Din\u00e2mica em uma nova planilha, ou escolha Planilha Existente e selecione o local em que deseja exibir a Tabela Din\u00e2mica. Selecione ok . Depois disso, no lado direito de sua tela, selecione os dados que voc\u00ea quer inserir na tabela e observe como ela foi criada automaticamente. Se necess\u00e1rio, mude os itens nos campos dispon\u00edveis no canto inferior direito de forma que a tabela fa\u00e7a mais sentido/seja mais f\u00e1cil de interpretar. A seguir est\u00e1 um exemplo (\u00e0 esquerda est\u00e3o os dados sem nenhuma formata\u00e7\u00e3o ou edi\u00e7\u00e3o e \u00e0 direita est\u00e1 a tabela din\u00e2mica):","title":"9. Tabela Din\u00e2mica"},{"location":"excel/#10-grafico-dinamico","text":"Os Gr\u00e1ficos Din\u00e2micos s\u00e3o uma \u00f3tima maneira de adicionar visualiza\u00e7\u00f5es aos dados, j\u00e1 que os dados em formato de gr\u00e1fico geralmente s\u00e3o muito mais intuitivos do que os mesmos em tabelas. Para adicionar um gr\u00e1fico din\u00e2mico, os passos s\u00e3o basicamente os mesmos da tabela din\u00e2mica. Primeiro selecione os dados, depois clique em inserir > gr\u00e1fico din\u00e2mico . Em Tabela/Intervalo , verifique o intervalo de c\u00e9lulas. Em Escolha o local no qual deseja que a tabela e o gr\u00e1fico din\u00e2micos sejam colocados , selecione Nova Planilha para posicion\u00e1-los em uma nova planilha, ou escolha Planilha Existente e selecione o local em que deseja exibi-los. Selecione ok . Depois disso, no lado direito de sua tela, selecione os dados que voc\u00ea quer inserir no gr\u00e1fico e mude os itens nos campos dispon\u00edveis no canto inferior direito de forma que seu gr\u00e1fico fa\u00e7a mais sentido/seja mais f\u00e1cil de interpretar. A seguir est\u00e1 um exemplo de gr\u00e1fico din\u00e2mico juntamente com a tabela que deu origem ao mesmo.","title":"10. Gr\u00e1fico Din\u00e2mico"},{"location":"excel/#11-dashboard","text":"Um dashboard \u00e9 uma representa\u00e7\u00e3o visual de m\u00e9tricas de chave que lhe permitem rapidamente ver e analisar os seus dados num \u00fanico local. Dashboards apenas n\u00e3o fornecem vistas de dados consolidados, mas os utilizadores ir\u00e3o conseguir filtrar os dados para apresentar apenas o que \u00e9 importante.","title":"11. Dashboard"},{"location":"excel/#12-guia-desenvolvedor","text":"","title":"12. Guia Desenvolvedor"},{"location":"excel/#13-macros","text":"a) Bot\u00f5es para Macros b) Habilitar Macros c) Salvar pasta de trabalho d) Criando uma Macro no VBE","title":"13. Macros"},{"location":"excel/#atalhos","text":"","title":"Atalhos:"},{"location":"excel/#1-selecionar-linhas-e-colunas","text":"Primeira op\u00e7\u00e3o: clicar no n\u00famero da linha ou no nome da coluna. Segunda op\u00e7\u00e3o: parar na coluna de interesse e usar ctrl e espa\u00e7o (seleciona a coluna inteira); ou parar na linda de interesse e pressionar shift + espa\u00e7o (seleciona a linha inteira).","title":"1. Selecionar linhas e colunas:"},{"location":"excel/#2-inserir-linhas","text":"Primeira op\u00e7\u00e3o: clicar no n\u00famero da linha e clicar em Inserir ou clicar no n\u00famero da linha e digitar i . Segunda op\u00e7\u00e3o: selecionar a linha abaixo da qual voc\u00ea pretende inserir uma nova linha (lembre-se da primeira dica: selecione a linha utilizando o atalho shift + espa\u00e7o ). Depois que a linha estiver selecionada, pressione ctrl + + (caso n\u00e3o tenha o + separado no seu teclado, pressione ctrl + shift + + ). Dica adicional: caso voc\u00ea queira incluir mais de uma linha, basta selecionar o n\u00famero de linhas que voc\u00ea quer incluir segurando a tecla shift e indo com a seta para baixo ou para cima e depois usar o atalho para inserir as linhas ( ctrl + + ). O mesmo vale para as colunas.","title":"2. Inserir linhas:"},{"location":"excel/#3-apagar-linhas","text":"Para apagar a linha, o atalho segue a mesma ideia da dica anterior: selecione a linha e pressione ctrl + - .","title":"3. Apagar linhas:"},{"location":"excel/#4-andando-pelas-celulas-da-planilha","text":"Se voc\u00ea tem uma planilha com muitos dados e quer andar entre as c\u00e9lulas, h\u00e1 alguns atalhos \u00fateis para isso: Para ir para a \u00faltima linha: ctrl + seta para baixo ; Para ir para a primeiro linha: ctrl + seta para cima ; Para ir para a primeira coluna: ctrl + seta para a esquerda ; Para ir para a \u00faltima coluna: ctrl + seta para a direita ; Para ir para a primeira c\u00e9lula da planilha (A1): ctrl + home .","title":"4. Andando pelas c\u00e9lulas da planilha:"},{"location":"excel/#5-selecionando-linhas-e-colunas","text":"Usando os mesmos atalhos da dica 4 juntamente com a tecla shift , \u00e9 poss\u00edvel selecionar v\u00e1rias linhas e v\u00e1rias colunas. Ex.: para selecionar uma linha inteira (a partir da c\u00e9lula em que voc\u00ea est\u00e1), pressione ctrl + shift + seta para cima ou seta para baixo . O mesmo vale para selecionar v\u00e1rias colunas. Use os mesmos atalhos combinados com as setas para os lados. Se a inten\u00e7\u00e3o \u00e9 selecionar toda a sua planilha, pressione ctrl + * . No caso de laptops, o * costuma ficar acima do n\u00famero 8. Ent\u00e3o o atalho \u00e9: ctrl + shift + 8 .","title":"5. Selecionando linhas e colunas:"},{"location":"excel/#6-aumentando-a-altura-das-linhas","text":"Selecione todas as linhas. Lembra do nosso atalho para isso? Nesse caso, basta selecionar a primeira linha com o atalho shift + espa\u00e7o e depois selecionar at\u00e9 a \u00faltima linha com o atalho ctrl + shift + seta para baixo . Caso ache mais f\u00e1cil, selecione tudo com o mouse ou marque a primeira linha e pressione shift + seta para baixo at\u00e9 chegar na linha desejada. Depois, v\u00e1 com o cursor at\u00e9 a linha entre os n\u00fameros das linhas. O cursor vai virar uma pequena cruz. Selecione e puxe para baixo deixando a linha do tamanho desejado. Com isso, todas as linhas ficar\u00e3o com a mesma altura.","title":"6. Aumentando a altura das linhas:"},{"location":"excel/#7-preenchendo-as-celulas-automaticamente","text":"Se voc\u00ea precisa enumerar algumas c\u00e9lulas do n\u00famero 1 ao 100, por exemplo, voc\u00ea j\u00e1 sabe que pode inserir o n\u00famero 1 em uma c\u00e9lula, o n\u00famero 2 na c\u00e9lula seguinte, selecionar as duas, clicar com o mouse no canto inferior direito da c\u00e9lula de baixo e puxar para baixo, certo? Com isso, as pr\u00f3ximas c\u00e9lulas ser\u00e3o preenchidas automaticamente at\u00e9 o n\u00famero que voc\u00ea deseja. Por\u00e9m, se voc\u00ea colocar o indicador ordinal, assim: 1\u00ba, 2\u00ba, 3\u00ba etc. esse atalho n\u00e3o funciona mais, pois o tipo da c\u00e9lula muda. Qual a solu\u00e7\u00e3o ent\u00e3o? Terei que digitar tudo at\u00e9 o 100 ou at\u00e9 o 500, 700, dependendo do caso? N\u00e3o. Tem uma forma muito mais simples. Vamos l\u00e1! Primeiro fa\u00e7a normalmente o primeiro passo (digitar os dois primeiros n\u00fameros, selecionar e puxar at\u00e9 o n\u00famero desejado). Com isso, todos os n\u00fameros estar\u00e3o selecionados. Se n\u00e3o estiverem, selecione-os. Ent\u00e3o pressione ctrl + 1 e a aba de formata\u00e7\u00e3o de c\u00e9lulas ser\u00e1 aberta (outro atalho bacana, olha s\u00f3!). Clique em personalizado , depois escolha o n\u00famero 0 (ele provavelmente estar\u00e1 como geral ). Agora edite o tipo adicionando \"\u00ba\" (o s\u00edmbolo de grau entre aspas) na frente do n\u00famero e clique em ok . Pronto! Parece complicado, mas \u00e9 muito simples. \u00c9 s\u00f3 seguir esses passos e a sua lista de n\u00fameros ordinais est\u00e1 pronta! Ah, e caso voc\u00ea queira adicionar mais n\u00fameros, agora \u00e9 s\u00f3 selecionar e puxar para baixo que vai funcionar normalmente.","title":"7. Preenchendo as c\u00e9lulas automaticamente:"},{"location":"excel/#8-tabela-zebrada","text":"Primeiro selecione a sua tabela ( ctrl + * ), depois clique em formata\u00e7\u00e3o condicional e em nova regra . Escolha a \u00faltima op\u00e7\u00e3o da lista ( Usar uma f\u00f3rmula para determinar quais c\u00e9lulas devem ser formatadas ). Agora clique na caixa de texto logo abaixo e digite: =MOD(LIN();2)=0 . O pr\u00f3ximo passo \u00e9 clicar em formatar ainda nesta janela. Com isso, uma nova janela ser\u00e1 aberta. Selecione a op\u00e7\u00e3o preenchimento e escolha a cor desejada. Prontinho! Sua planilha agora tem uma linha de cada cor. Inclusive, voc\u00ea pode adicionar mais linhas que o padr\u00e3o ser\u00e1 mantido.","title":"8. Tabela zebrada:"},{"location":"excel/#erros-comuns-no-excel","text":"","title":"Erros comuns no Excel"},{"location":"mercado-financeiro/","text":"Aqui voc\u00ea encontrar\u00e1 dicas sobre investimentos e mercado financeiro. Ainda em constru\u00e7\u00e3o. :)","title":"Mercado financeiro"},{"location":"python/","text":"Easter eggs Aqui est\u00e3o tr\u00eas easter eggs: in [1]: import __hello__ out[1]: Hello world! Este segundo easter egg \u00e9 o mais interessante. Basicamente vemos nele os \"mandamentos\" do Python: in [1]: import this out[1]: \"\"\" The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! \"\"\" Por fim, um terceiro easter egg \u00e9 o seguinte comando: import antigravity Se voc\u00ea executar esse c\u00f3digo, voc\u00ea \u00e9 levado a um quadrinho do site xkcd . O quadrinho fica nesse link . Comandos b\u00e1sicos Listas: In [1]: list1 = [1, 2, 3] In [2]: list1[2] Out[2]: 3 In [3]]: list1[2] = 5 In [4]: list1 Out [4]: [1, 2, 5] Dicion\u00e1rios Aqui, em vez de acessar o valor com um \u00edndice, acessamos com valores de chaves (aqueles que est\u00e3o entre {}): In [1]: dic = {'var1': 1, 'var2': 2} In [2]: dic Out [2]: {'var1': 1, 'var2': 2} In [3]: dic['var1'] = 3 In [4]: dic['var1'] Out[4]: 3 In [5]: dic2 = {'list': [1,2,3], 'string': 'hello, world', 'number': 1.0} In [6]: dic2 Out[6]: {'list': [1, 2, 3], 'string': 'hello, world', 'number': 1.0} In [7]: dic2['string'] Out[7]: 'hello, world' In [8]: type(dic2['number']) Out[8]: float In [9]: dic2['list'][2] Out[9]: 3 Tuplas As tuplas s\u00e3o semelhantes \u00e0s listas, mas ap\u00f3s a defini\u00e7\u00e3o dos valores, n\u00e3o \u00e9 permitido atribuir novos valores. In [1]: tup = (1, 2, 3) In [2]: tup Out[2]: (1, 2, 3) In [3]: tup[1] Out[3]: 2 In [4]: tup[1]=3 Out[4]: a sa\u00edda ser\u00e1 um erro, pois como foi dito, as tuplas n\u00e3o aceitam atribui\u00e7\u00f5es (assigments). Booleanos e opera\u00e7\u00f5es l\u00f3gicas Resumo das opera\u00e7\u00f5es: Operador Compara\u00e7\u00e3o == igual a != diferente de < menor que > maior que <= menor ou igual a >= maior ou igual a In [1]: x = 10 In [2]: x >= 10 Out[2]: True In [3]: x >= 10 and x < 11 Out[3]: True In [4]: x >= 10 or x > 20 Out[4]: True In [5]: x < 10 or x > 10 Out[5]: False In [6]: x == 10 Out[6]: True In [7]: x != 10 Out[7]: False If, else e elif In [1]: x = 10 In [2]: if x == 10: y = 'approved' elif 5 < x < 6: y = 'retrieve' else: y = 'disapproved' print(y) Out[2]: approved In [3]: y Out[3]: 'approved' In [4]: x = 5.5 In [5]: if x == 10: y = 'approved' elif 5 < x < 6: y = 'retrieve' else: y = 'disapproved' print(y) Out[5]: retrieve Iter\u00e1veis (for, range e while) In [1]: x = [1, 2, 3, 4] In [2]: for i in x: print (i) Out[3]: 1 2 3 4 In [4]: for i in range(0,10): print(i) Out[5]: 0 1 2 3 4 5 6 7 8 9 In [6]: seq = list(range(0,10)) In [7]: seq Out[7]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] While In [1]: i = 1 In [2]: while i < 5: print('i is: {}'.format(i)) i = i + 1 Out[2]: i is: 1 i is: 2 i is: 3 i is: 4 In [3]]: out = [] In [4]: x = [1, 2, 3, 4] In [5]: for item in x: out.append(item**2) Out Out[5]: [1, 4, 9, 16] Fun\u00e7\u00f5es In [1]: x = 2 def my_func(param): exp = param**2 return exp In [2]: y = my_func(x) In [3]: y Out[3]: 4 Fun\u00e7\u00e3o lambda In [1]: def squared(var): return var**2 squared(2) Out[1]: 4 In [2]: def squared(var): return var**2 squared(2) Out[2]: 4 In [3]: lambda var: var**2 squared(2) Out[3]: 4 Fun\u00e7\u00f5es map e filter In [1]: seq = [1, 2, 3, 4, 5] In [2]: map(squared, seq); In [3]: list(map(squared, seq)) Out[3]: [1, 4, 9, 16, 25] In [4]: list(map(lambda x:x**2, seq)) Out[4]: [1, 4, 9, 16, 25] In [5]: list(filter(lambda item:item%2==0, seq)) Out[5]: [2, 4] M\u00e9todos In [1]: hw = 'Hello, world!' In [2]: hw.upper() Out[2]: 'HELLO, WORLD!' In [3]: list = [1, 2, 3] In [4]: list.append(4) In [5]: list Out[5]: [1, 2, 3, 4] In [6]: list.pop() # para remover valores de uma lista Out[6]: 4 In [7]: list Out[7]: [1, 2, 3] In [8]: first = list.pop(0) # removendo um valor espec\u00edfico In [9]: list Out[9]: [2, 3] In [10]: 'x' in [1, 2, 3] Out[10]: False In [11]: 'x' in [1, 2, 'x'] Out[11]: True Split para strings In [1]: text = ('Red, blue and black') In [2]: text Out[2]: 'Red, blue and black' In [3]: text.split() Out[3]: ['red,', 'blue', 'and', 'black'] In [4]: text.split('and') Out[4]: ['red, blue ', ' black'] In [5]: text.upper() Out[5]: 'RED, BLUE AND BLACK' In [6]: text.lower() Out[6]: 'red, blue and black' Python para an\u00e1lise de dados Numpy In [1]: import numpy as np In [2]: my_list = [1, 2, 3] In [3]: my_list Out[3]: [1, 2, 3] In [4]: np.array(my_list) Out[4]: array([1, 2, 3]) In [5]: my_list[-1] Out[5]: 3 Matriz (np.arange, np.linspace) In [1]: my_matrix = [[1, 3, 3], [4, 5, 6], [7, 8, 9]] In [2]: my_matrix Out[2]: [[1, 3, 3], [4, 5, 6], [7, 8, 9]] In [3]: np.array(my_matrix) Out[3]: array([[1, 3, 3], [4, 5, 6], [7, 8, 9]]) In [4]: np.arange(0,10) Out[4]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) In [5]: np.arange(0, 10, 2) # the third argument defines the interval Out[5]: array([0, 2, 4, 6, 8]) In [6]: np.zeros(3) Out[6]: array([0., 0., 0.]) In [7]: ar = np.zeros((5, 5)) In [8]: ar Out[8]: array([[0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.]]) In [9]: np.ones((3, 3)) Out[9]: array([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]) In [10]: np.eye(4) # matriz identidade Out[10]: array([[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 1.]]) In [11]: np.linspace(0, 10, 3) # o terceiro argumento define quantos n\u00famero queremos Out[11]: array([ 0., 5., 10.]) Numpy random In [1]: np.random.rand(3) # n\u00fameros de 0 a 1 Out[1]: array([0.41671642, 0.27110098, 0.68021772]) In [2]: np.random.rand(2) * 100 # nn\u00fameros de 0 a 100 Out[2]: array([84.91907808, 18.09757989]) In [3]: np.random.rand(3, 2) # matriz 3x2 Out[3]: array([[0.97041758, 0.67253306], [0.0126004 , 0.86894573], [0.40713987, 0.66303445]]) In [4]: np.random.randn(4) Out[4]: array([ 0.64014424, -0.37955834, 0.60433726, -0.66348324]) In [5]: np.random.randint(0, 100, 10) Out[5]: array([43, 59, 56, 15, 76, 90, 43, 74, 70, 54]) In [6]: np.random.rand(4) * 100 Out[6]: array([45.0946955 , 25.68386088, 50.81856534, 90.34075123]) In [7]: np.round(np.random.rand(4), 0) * 100 Out[7]: array([ 0., 100., 0., 100.]) In [8]: arr = np.random.rand(25) In [9]: arr Out[9]: array([0.70457937, 0.14398985, 0.31900377, 0.11890531, 0.56503378, 0.56102052, 0.4487779 , 0.12641164, 0.97500985, 0.21741891, 0.35641972, 0.91385335, 0.7476478 , 0.12000251, 0.39924327, 0.21224457, 0.23037201, 0.74209167, 0.80416263, 0.07611099, 0.21483552, 0.39899085, 0.14722631, 0.38143338, 0.06336958]) In [10]: arr2 = arr.reshape((5,5)) # matriz 5x5 In [11]: arr2.shape Out[11]: (5, 5) In [12]: arr.max() Out[12]: 0.9750098522689852 In [13]: arr.mean() Out[13]: 0.39952620203645706 In [14]: arr.min() Out[14]: 0.06336957700117996 In [15]: arr.argmax() # mostra a posi\u00e7\u00e3o do n\u00famero m\u00e1ximo Out[15]: 8 Indexa\u00e7\u00e3o In [1]: arr = np.arange(0, 30, 3) In [2]: arr Out[2]: array([ 0, 3, 6, 9, 12, 15, 18, 21, 24, 27]) In [3]: arr[4] Out[3]: 12 In [4]: arr[2:5] Out[4]: array([ 6, 9, 12]) In [5]: arr[:5] Out[5]: array([ 0, 3, 6, 9, 12]) In [6]: arr[2:] Out[6]: array([ 6, 9, 12, 15, 18, 21, 24, 27]) In [7]: arr[5:] = 100 In [8]: arr Out[8]: array([ 0, 3, 6, 9, 12, 100, 100, 100, 100, 100]) In [9]: arr = np.arange(50).reshape((5,10)) In [10]: arr Out[10]: array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49]]) In [11]: arr.shape Out[11]: (5, 10) Fatiamento (slice) In [1]: a = np.array([[6,7,8], [1,2,3], [9,3,2]]) In [2]: a Out[2]: array([[6, 7, 8], [1, 2, 3], [9, 3, 2]]) In [3]: a[1,2] Out[3]: 3 In [4]: a[0:2, 2] Out[4]: array([8, 3]) In [5]: a[-1] Out[5]: array([9, 3, 2]) In [6]: a[-1, 0:2] Out[6]: array([9, 3]) In [7]: a[:, 1:3] Out[7]: array([[7, 8], [2, 3], [3, 2]]) In [8]: arr Out[8]: array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49]]) In [9]: arr[:3][:] # 3 lines and all columns Out[9]: array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]]) In [10]: arr[:2] # 2 lines and all columns Out[10]: array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]) In [11]: arr Out[11]: array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49]]) In [12]: arr[:][:3]# all lines (??) No, the arr[:] returns just the arr. So, it considers [:3] like the lines. Out[12]: array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]]) In [13]: arr2 = arr[:3] In [14]: arr2 Out[14]: array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]]) In [15]: arr2[:] = 100 In [16]: arr2 Out[16]: array([[100, 100, 100, 100, 100, 100, 100, 100, 100, 100], [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]]) In [17]: arr # an alteraiton on arr2 made alterations here too Out[17]: array([[100, 100, 100, 100, 100, 100, 100, 100, 100, 100], [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], [ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]]) In [18]: arr2 = arr[:3].copy() In [19]: arr2 Out[19]: array([[100, 100, 100, 100, 100, 100, 100, 100, 100, 100], [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]]) In [20]: arr[1:4,5:] Out[20]: array([[100, 100, 100, 100, 100], [100, 100, 100, 100, 100], [ 35, 36, 37, 38, 39]]) In [21]: arr > 50 Out[21]: array([[ True, True, True, True, True, True, True, True, True, True], [ True, True, True, True, True, True, True, True, True, True], [ True, True, True, True, True, True, True, True, True, True], [False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False]]) In [22]: bol = arr > 50 In [23]: arr[bol] Out[23]: array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]) array = np.linspace(0, 100, 30) In [24]: bol = arr > 50 In [25]: array.shape Out[25]: (30,) In [26]: array = array.reshape(3, 10) In [27]: array Out[27]: array([[ 0. , 3.44827586, 6.89655172, 10.34482759, 13.79310345, 17.24137931, 20.68965517, 24.13793103, 27.5862069 , 31.03448276], [ 34.48275862, 37.93103448, 41.37931034, 44.82758621, 48.27586207, 51.72413793, 55.17241379, 58.62068966, 62.06896552, 65.51724138], [ 68.96551724, 72.4137931 , 75.86206897, 79.31034483, 82.75862069, 86.20689655, 89.65517241, 93.10344828, 96.55172414, 100. ]]) In [28]: array[0:2, 2] Out[28]: array([ 6.89655172, 41.37931034]) Opera\u00e7\u00f5es com arrays In [1]: arr = np.arange(0, 16) In [2]: arr Out[2]: array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) In [3]: arr + arr Out[3]: array([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) In [4]: arr * arr Out[4]: array([ 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225]) In [5]: arr/arr # division by 0 Out[5]: array([nan, 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]) Warning: RuntimeWarning: invalid value encountered in true_divide In [6]:1 / arr Out[6]: array([ inf, 1. , 0.5 , 0.33333333, 0.25 , 0.2 , 0.16666667, 0.14285714, 0.125 , 0.11111111, 0.1 , 0.09090909, 0.08333333, 0.07692308, 0.07142857, 0.06666667]) Warning: RuntimeWarning: divide by zero encountered in true_divide In [7]: arr + 100 Out[7]: array([100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) In [8]: np.sqrt(arr) Out[8]: array([0. , 1. , 1.41421356, 1.73205081, 2. , 2.23606798, 2.44948974, 2.64575131, 2.82842712, 3. , 3.16227766, 3.31662479, 3.46410162, 3.60555128, 3.74165739, 3.87298335]) In [9]: np.exp(arr) Out[9]: array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01, 5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03, 2.98095799e+03, 8.10308393e+03, 2.20264658e+04, 5.98741417e+04, 1.62754791e+05, 4.42413392e+05, 1.20260428e+06, 3.26901737e+06]) In [10]: np.mean(arr) Out[10]: 7.5 In [11]: np.sin(arr) # sine/seno Out[11]: array([ 0. , 0.84147098, 0.90929743, 0.14112001, -0.7568025 , -0.95892427, -0.2794155 , 0.6569866 , 0.98935825, 0.41211849, -0.54402111, -0.99999021, -0.53657292, 0.42016704, 0.99060736, 0.65028784]) In [12]: np.max(arr) Out[12]: 15 In [13]: arr.max() Out[13]: 15 Pandas Series In [1]: import pandas as pd # importando o pacote In [2]: labels = ['a', 'b', 'c'] my_list = [10, 20, 30] arr = np.array([10, 20, 30]) d = {'a': 10, 'b': 20, 'c': 30} In [3]: pd.Series(data= my_list, index = labels) Out[3]: a 10 b 20 c 30 In [4]: series = pd.Series(data= my_list, index = labels) In [5]: series['a'] Out[5]: 10 In [6]: pd.Series(labels, my_list) Out[6]: 10 a 20 b 30 c In [7]: ser1 = pd.Series([1, 2, 3, 4], index = ['EUA', 'Alemanha', 'URSS', 'Jap\u00e3o']) In [8]: ser2 = pd.Series([1, 2, 3, 4], index = ['EUA', 'Alemanha', 'It\u00e1lia', 'Jap\u00e3o']) In [9]: ser2 Out[9]: EUA 1 Alemanha 2 It\u00e1lia 3 Jap\u00e3o 4 In [10]: ser1 + ser2 Out[10]: Alemanha 4.0 EUA 2.0 It\u00e1lia NaN Jap\u00e3o 8.0 URSS NaN Dataframe: creation and slicing In [2]: np.random.seed(101) In [2]: df = pd.DataFrame(np.random.randn(5, 4), index = 'A B C D E'.split(), columns = 'W X Y Z'.split()) In [3]: df Out[2]: W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 In [2]: df['W'] Out[2]: A 2.706850 B 0.651118 C -2.018168 D 0.188695 E 0.190794 In [2]: type(df['W']) Out[2]: pandas.core.series.Series In [2]: df[['W', 'Z']] Out[2]: W Z A 2.706850 0.503826 B 0.651118 0.605965 C -2.018168 -0.589001 D 0.188695 0.955057 E 0.190794 0.683509 In [2]: df['new'] = df['W'] + df['Z'] In []: df Out[2]: W X Y Z new A 2.706850 0.628133 0.907969 0.503826 3.210676 B 0.651118 -0.319318 -0.848077 0.605965 1.257083 C -2.018168 0.740122 0.528813 -0.589001 -2.607169 D 0.188695 -0.758872 -0.933237 0.955057 1.143752 E 0.190794 1.978757 2.605967 0.683509 0.874303 In [2]: df.drop('new', axis = 1) Out[2]: W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 In [2]: df Out[2]: W X Y Z new A 2.706850 0.628133 0.907969 0.503826 3.210676 B 0.651118 -0.319318 -0.848077 0.605965 1.257083 C -2.018168 0.740122 0.528813 -0.589001 -2.607169 D 0.188695 -0.758872 -0.933237 0.955057 1.143752 E 0.190794 1.978757 2.605967 0.683509 0.874303 In [2]: df.drop('new', axis = 1, inplace = True) # apply directly on dataframe In [2]: df Out[2]: W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 In [2]: df.loc['A', 'W'] Out[2]: 2.706849839399938 In [2]: df.loc[['A', 'B'], ['X', 'Y', 'Z']] # name index Out[2]: X Y Z A 0.628133 0.907969 0.503826 B -0.319318 -0.848077 0.605965 In [2]: df.iloc[1:4, 2:] # index Out[2]: Y Z B -0.848077 0.605965 C 0.528813 -0.589001 D -0.933237 0.955057 Dataframe: conditional selecting, set_index In [2]: from numpy.random import randn np.random.seed(101) In [2]: df = pd.DataFrame(randn(5,4), index = 'A B C D E'.split(), columns = 'W X Y Z'.split()) df Out[2]: W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 In [2]: df > 0 Out[2]: W X Y Z A True True True True B True False False True C False True True False D True False False True E True True True True In [2]: bol = df > 0 In [2]: df[bol] Out[2]: W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 NaN NaN 0.605965 C NaN 0.740122 0.528813 NaN D 0.188695 NaN NaN 0.955057 E 0.190794 1.978757 2.605967 0.683509 In [2]: df[df['W'] > 0] Out[2]: W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 In [2]: df[df['W'] > 0]['Y'] Out[2]: A 0.907969 B -0.848077 D -0.933237 E 2.605967 In [2]: df[(df['W'] > 0) & (df['Y'] > 1)] # & can deal with series while 'and' can't Out[2]: W X Y Z E 0.190794 1.978757 2.605967 0.683509 In [2]: df[(df['W'] > 0) | (df['Y'] > 1)] Out[2]: W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 In [2]: df.reset_index(inplace = True) df Out[2]: index W X Y Z 0 A 2.706850 0.628133 0.907969 0.503826 1 B 0.651118 -0.319318 -0.848077 0.605965 2 C -2.018168 0.740122 0.528813 -0.589001 3 D 0.188695 -0.758872 -0.933237 0.955057 4 E 0.190794 1.978757 2.605967 0.683509 In [2]: col = 'RS RJ SP AM SC'.split() col Out[2]: ['RS', 'RJ', 'SP', 'AM', 'SC'] In [2]: df['State'] = col df Out[2]: index W X Y Z State Estado RS A 2.706850 0.628133 0.907969 0.503826 RS RJ B 0.651118 -0.319318 -0.848077 0.605965 RJ SP C -2.018168 0.740122 0.528813 -0.589001 SP AM D 0.188695 -0.758872 -0.933237 0.955057 AM SC E 0.190794 1.978757 2.605967 0.683509 SC In [2]: df.set_index('State', inplace = True) # defining State as index df Out[2]: index W X Y Z Estado RS A 2.706850 0.628133 0.907969 0.503826 RJ B 0.651118 -0.319318 -0.848077 0.605965 SP C -2.018168 0.740122 0.528813 -0.589001 AM D 0.188695 -0.758872 -0.933237 0.955057 SC E 0.190794 1.978757 2.605967 0.683509 Groupby In [2]: data = {'Company': ['GOOG', 'GOOG', 'MSFT', 'MSFT', 'FB', 'FB'], 'Name': ['Sam', 'Charlie', 'Amy', 'Vanessa', 'Carl', 'Sarah'], 'Sales': [200, 120, 340, 124, 243, 350]} In [2]: df = pd.DataFrame(data) df Out[2]: Company Name Sales 0 GOOG Sam 200 1 GOOG Charlie 120 2 MSFT Amy 340 3 MSFT Vanessa 124 4 FB Carl 243 5 FB Sarah 350 In [2]: group = df.groupby('Company') group.sum() Out[2]: Sales Company FB 593 GOOG 320 MSFT 464 In [2]: group.describe() Out[2]: Sales count mean std min 25% 50% 75% max Company FB 2.0 296.5 75.660426 243.0 269.75 296.5 323.25 350.0 GOOG 2.0 160.0 56.568542 120.0 140.00 160.0 180.00 200.0 MSFT 2.0 232.0 152.735065 124.0 178.00 232.0 286.00 340.0 In [2]: group2 = df.groupby('Name') group2.sum() Out[2]: Sales Name Amy 340 Carl 243 Charlie 120 Sam 200 Sarah 350 Vanessa 124 Seaborn In [2]: import seaborn as sns # importando o pacote %matplotlib inline # para plotagem dos gr\u00e1ficos Distribution plots In [1]: tips = sns.load_dataset('tips') # carregando um conjunto de dados de exemplo tips.info() Out[1]: <class 'pandas.core.frame.DataFrame'> RangeIndex: 244 entries, 0 to 243 Data columns (total 7 columns): total_bill 244 non-null float64 tip 244 non-null float64 sex 244 non-null category smoker 244 non-null category day 244 non-null category time 244 non-null category size 244 non-null int64 dtypes: category(4), float64(2), int64(1) memory usage: 7.2 KB In [2]: tips.head() # para ver as 5 primeiras linhas do conjunto de dados Out[2]: total_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4 In [3]: sns.distplot(tips['total_bill'], kde = False, bins = 30); # bins = number of bars Out[3]: In [4]: sns.jointplot(x = 'total_bill', y = 'tip', data = tips, kind = 'reg'); Out[4]: In [5]: sns.jointplot('total_bill', 'tip', data = tips); Out[5]: 3 In [6]: sns.jointplot('total_bill', 'tip', data = tips, kind = 'hex'); Out[6]: 4 In [7]: sns.pairplot(tips, hue = 'sex'); Out[7]: 5 In [8]: sns.pairplot(tips, hue = 'sex', palette = 'coolwarm'); Out[8]: 6 Categorical plots In [1]: sns.barplot('sex', 'total_bill', data = tips, estimator = np.std); Out[1]: 8 In [2]: sns.boxplot('day', 'total_bill', data = tips, palette = 'rainbow', hue = 'sex'); Out[2]: 10 In [3]: sns.boxplot(data = tips, palette = 'rainbow', orient = 'h'); Out[3]: In [4]: sns.violinplot('day', 'tip', data = tips); Out[4]: In [5]: sns.violinplot('day', 'tip', data = tips, hue = 'sex'); Out[5]: In [6]: sns.violinplot('day', 'tip', data = tips, hue = 'sex', split = True); Out[6]: In [7]: sns.stripplot('day', 'total_bill', data = tips); Out[7]: In [8]: sns.stripplot('day', 'total_bill', data = tips, jitter = True, hue = 'sex'); Out[8]: In [9]: sns.stripplot('day', 'total_bill', data = tips, jitter = True, hue = 'sex', dodge = True); Out[9]: In [11]: sns.swarmplot('day', 'total_bill', data = tips, color = 'black') sns.violinplot('day', 'total_bill', data = tips); Out[11]: In [12]: sns.catplot('sex', 'total_bill', data = tips, kind = 'bar'); # antigo factorplot Out[12]: Plots matriciais In [1]: flights = sns.load_dataset('flights') tips = sns.load_dataset('tips') ```python In [2]: crr = tips.corr() In [3]: sns.heatmap(crr, cmap = 'coolwarm', annot = True); Out[3]: sb 20 In [4]: pf = flights.pivot_table(values = 'passengers', index = 'month', columns = 'year'); In [5]: sns.heatmap(pf, cmap = 'YlGnBu', linecolor = 'w', lw = '1'); Out[5]: In [6]: sns.clustermap(pf, standard_scale = 1); Out[6]: Plots de regress\u00e3o In [1]: tips = sns.load_dataset('tips') In [2]: sns.lmplot('total_bill', 'tip', data = tips, hue = 'sex', palette = 'coolwarm'); Out[2]: sb 23 In [3]: sns.lmplot('total_bill', 'tip', data = tips, hue = 'sex', markers = ['o', 'v']); Out[3]: ![seaborn-24](img/seaborn/seaborn-24.png) In [4]: sns.lmplot('total_bill', 'tip', data = tips, hue = 'sex', markers = ['o', 'v'], scatter_kws = {'s': 100}); Out[4]: In [5]: sns.lmplot('total_bill', 'tip', data = tips, hue = 'sex', col = 'sex', row = 'time'); Out[5]: In [6]: sns.lmplot('total_bill', 'tip', data = tips, hue = 'sex', col = 'day', aspect = 0.6, height = 8); Out[6]: Pair grids In [1]: iris = sns.load_dataset('iris') In [2]: iris['species'].value_counts() Out[2]: virginica 50 versicolor 50 setosa 50 In [2]: g = sns.PairGrid(iris) g.map(plt.scatter); Out[2]: In [2]: g = sns.PairGrid(iris) g.map_diag(plt.hist) g.map_upper(plt.scatter) g.map_lower(sns.kdeplot); Out[2]: In [2]: sns.pairplot(iris, hue = 'species'); Out[2]: In [2]: tips = sns.load_dataset('tips') In [2]: g = sns.FacetGrid(tips, col = 'time', row = 'smoker') g.map(plt.hist, 'total_bill'); Out[2]:","title":"Python"},{"location":"python/#easter-eggs","text":"Aqui est\u00e3o tr\u00eas easter eggs: in [1]: import __hello__ out[1]: Hello world! Este segundo easter egg \u00e9 o mais interessante. Basicamente vemos nele os \"mandamentos\" do Python: in [1]: import this out[1]: \"\"\" The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! \"\"\" Por fim, um terceiro easter egg \u00e9 o seguinte comando: import antigravity Se voc\u00ea executar esse c\u00f3digo, voc\u00ea \u00e9 levado a um quadrinho do site xkcd . O quadrinho fica nesse link .","title":"Easter eggs"},{"location":"python/#comandos-basicos","text":"Listas: In [1]: list1 = [1, 2, 3] In [2]: list1[2] Out[2]: 3 In [3]]: list1[2] = 5 In [4]: list1 Out [4]: [1, 2, 5] Dicion\u00e1rios Aqui, em vez de acessar o valor com um \u00edndice, acessamos com valores de chaves (aqueles que est\u00e3o entre {}): In [1]: dic = {'var1': 1, 'var2': 2} In [2]: dic Out [2]: {'var1': 1, 'var2': 2} In [3]: dic['var1'] = 3 In [4]: dic['var1'] Out[4]: 3 In [5]: dic2 = {'list': [1,2,3], 'string': 'hello, world', 'number': 1.0} In [6]: dic2 Out[6]: {'list': [1, 2, 3], 'string': 'hello, world', 'number': 1.0} In [7]: dic2['string'] Out[7]: 'hello, world' In [8]: type(dic2['number']) Out[8]: float In [9]: dic2['list'][2] Out[9]: 3 Tuplas As tuplas s\u00e3o semelhantes \u00e0s listas, mas ap\u00f3s a defini\u00e7\u00e3o dos valores, n\u00e3o \u00e9 permitido atribuir novos valores. In [1]: tup = (1, 2, 3) In [2]: tup Out[2]: (1, 2, 3) In [3]: tup[1] Out[3]: 2 In [4]: tup[1]=3 Out[4]: a sa\u00edda ser\u00e1 um erro, pois como foi dito, as tuplas n\u00e3o aceitam atribui\u00e7\u00f5es (assigments). Booleanos e opera\u00e7\u00f5es l\u00f3gicas Resumo das opera\u00e7\u00f5es: Operador Compara\u00e7\u00e3o == igual a != diferente de < menor que > maior que <= menor ou igual a >= maior ou igual a In [1]: x = 10 In [2]: x >= 10 Out[2]: True In [3]: x >= 10 and x < 11 Out[3]: True In [4]: x >= 10 or x > 20 Out[4]: True In [5]: x < 10 or x > 10 Out[5]: False In [6]: x == 10 Out[6]: True In [7]: x != 10 Out[7]: False If, else e elif In [1]: x = 10 In [2]: if x == 10: y = 'approved' elif 5 < x < 6: y = 'retrieve' else: y = 'disapproved' print(y) Out[2]: approved In [3]: y Out[3]: 'approved' In [4]: x = 5.5 In [5]: if x == 10: y = 'approved' elif 5 < x < 6: y = 'retrieve' else: y = 'disapproved' print(y) Out[5]: retrieve Iter\u00e1veis (for, range e while) In [1]: x = [1, 2, 3, 4] In [2]: for i in x: print (i) Out[3]: 1 2 3 4 In [4]: for i in range(0,10): print(i) Out[5]: 0 1 2 3 4 5 6 7 8 9 In [6]: seq = list(range(0,10)) In [7]: seq Out[7]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] While In [1]: i = 1 In [2]: while i < 5: print('i is: {}'.format(i)) i = i + 1 Out[2]: i is: 1 i is: 2 i is: 3 i is: 4 In [3]]: out = [] In [4]: x = [1, 2, 3, 4] In [5]: for item in x: out.append(item**2) Out Out[5]: [1, 4, 9, 16] Fun\u00e7\u00f5es In [1]: x = 2 def my_func(param): exp = param**2 return exp In [2]: y = my_func(x) In [3]: y Out[3]: 4 Fun\u00e7\u00e3o lambda In [1]: def squared(var): return var**2 squared(2) Out[1]: 4 In [2]: def squared(var): return var**2 squared(2) Out[2]: 4 In [3]: lambda var: var**2 squared(2) Out[3]: 4 Fun\u00e7\u00f5es map e filter In [1]: seq = [1, 2, 3, 4, 5] In [2]: map(squared, seq); In [3]: list(map(squared, seq)) Out[3]: [1, 4, 9, 16, 25] In [4]: list(map(lambda x:x**2, seq)) Out[4]: [1, 4, 9, 16, 25] In [5]: list(filter(lambda item:item%2==0, seq)) Out[5]: [2, 4] M\u00e9todos In [1]: hw = 'Hello, world!' In [2]: hw.upper() Out[2]: 'HELLO, WORLD!' In [3]: list = [1, 2, 3] In [4]: list.append(4) In [5]: list Out[5]: [1, 2, 3, 4] In [6]: list.pop() # para remover valores de uma lista Out[6]: 4 In [7]: list Out[7]: [1, 2, 3] In [8]: first = list.pop(0) # removendo um valor espec\u00edfico In [9]: list Out[9]: [2, 3] In [10]: 'x' in [1, 2, 3] Out[10]: False In [11]: 'x' in [1, 2, 'x'] Out[11]: True Split para strings In [1]: text = ('Red, blue and black') In [2]: text Out[2]: 'Red, blue and black' In [3]: text.split() Out[3]: ['red,', 'blue', 'and', 'black'] In [4]: text.split('and') Out[4]: ['red, blue ', ' black'] In [5]: text.upper() Out[5]: 'RED, BLUE AND BLACK' In [6]: text.lower() Out[6]: 'red, blue and black'","title":"Comandos b\u00e1sicos"},{"location":"python/#python-para-analise-de-dados","text":"","title":"Python para an\u00e1lise de dados"},{"location":"python/#numpy","text":"In [1]: import numpy as np In [2]: my_list = [1, 2, 3] In [3]: my_list Out[3]: [1, 2, 3] In [4]: np.array(my_list) Out[4]: array([1, 2, 3]) In [5]: my_list[-1] Out[5]: 3 Matriz (np.arange, np.linspace) In [1]: my_matrix = [[1, 3, 3], [4, 5, 6], [7, 8, 9]] In [2]: my_matrix Out[2]: [[1, 3, 3], [4, 5, 6], [7, 8, 9]] In [3]: np.array(my_matrix) Out[3]: array([[1, 3, 3], [4, 5, 6], [7, 8, 9]]) In [4]: np.arange(0,10) Out[4]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) In [5]: np.arange(0, 10, 2) # the third argument defines the interval Out[5]: array([0, 2, 4, 6, 8]) In [6]: np.zeros(3) Out[6]: array([0., 0., 0.]) In [7]: ar = np.zeros((5, 5)) In [8]: ar Out[8]: array([[0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.]]) In [9]: np.ones((3, 3)) Out[9]: array([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]) In [10]: np.eye(4) # matriz identidade Out[10]: array([[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 1.]]) In [11]: np.linspace(0, 10, 3) # o terceiro argumento define quantos n\u00famero queremos Out[11]: array([ 0., 5., 10.]) Numpy random In [1]: np.random.rand(3) # n\u00fameros de 0 a 1 Out[1]: array([0.41671642, 0.27110098, 0.68021772]) In [2]: np.random.rand(2) * 100 # nn\u00fameros de 0 a 100 Out[2]: array([84.91907808, 18.09757989]) In [3]: np.random.rand(3, 2) # matriz 3x2 Out[3]: array([[0.97041758, 0.67253306], [0.0126004 , 0.86894573], [0.40713987, 0.66303445]]) In [4]: np.random.randn(4) Out[4]: array([ 0.64014424, -0.37955834, 0.60433726, -0.66348324]) In [5]: np.random.randint(0, 100, 10) Out[5]: array([43, 59, 56, 15, 76, 90, 43, 74, 70, 54]) In [6]: np.random.rand(4) * 100 Out[6]: array([45.0946955 , 25.68386088, 50.81856534, 90.34075123]) In [7]: np.round(np.random.rand(4), 0) * 100 Out[7]: array([ 0., 100., 0., 100.]) In [8]: arr = np.random.rand(25) In [9]: arr Out[9]: array([0.70457937, 0.14398985, 0.31900377, 0.11890531, 0.56503378, 0.56102052, 0.4487779 , 0.12641164, 0.97500985, 0.21741891, 0.35641972, 0.91385335, 0.7476478 , 0.12000251, 0.39924327, 0.21224457, 0.23037201, 0.74209167, 0.80416263, 0.07611099, 0.21483552, 0.39899085, 0.14722631, 0.38143338, 0.06336958]) In [10]: arr2 = arr.reshape((5,5)) # matriz 5x5 In [11]: arr2.shape Out[11]: (5, 5) In [12]: arr.max() Out[12]: 0.9750098522689852 In [13]: arr.mean() Out[13]: 0.39952620203645706 In [14]: arr.min() Out[14]: 0.06336957700117996 In [15]: arr.argmax() # mostra a posi\u00e7\u00e3o do n\u00famero m\u00e1ximo Out[15]: 8 Indexa\u00e7\u00e3o In [1]: arr = np.arange(0, 30, 3) In [2]: arr Out[2]: array([ 0, 3, 6, 9, 12, 15, 18, 21, 24, 27]) In [3]: arr[4] Out[3]: 12 In [4]: arr[2:5] Out[4]: array([ 6, 9, 12]) In [5]: arr[:5] Out[5]: array([ 0, 3, 6, 9, 12]) In [6]: arr[2:] Out[6]: array([ 6, 9, 12, 15, 18, 21, 24, 27]) In [7]: arr[5:] = 100 In [8]: arr Out[8]: array([ 0, 3, 6, 9, 12, 100, 100, 100, 100, 100]) In [9]: arr = np.arange(50).reshape((5,10)) In [10]: arr Out[10]: array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49]]) In [11]: arr.shape Out[11]: (5, 10) Fatiamento (slice) In [1]: a = np.array([[6,7,8], [1,2,3], [9,3,2]]) In [2]: a Out[2]: array([[6, 7, 8], [1, 2, 3], [9, 3, 2]]) In [3]: a[1,2] Out[3]: 3 In [4]: a[0:2, 2] Out[4]: array([8, 3]) In [5]: a[-1] Out[5]: array([9, 3, 2]) In [6]: a[-1, 0:2] Out[6]: array([9, 3]) In [7]: a[:, 1:3] Out[7]: array([[7, 8], [2, 3], [3, 2]]) In [8]: arr Out[8]: array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49]]) In [9]: arr[:3][:] # 3 lines and all columns Out[9]: array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]]) In [10]: arr[:2] # 2 lines and all columns Out[10]: array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]) In [11]: arr Out[11]: array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49]]) In [12]: arr[:][:3]# all lines (??) No, the arr[:] returns just the arr. So, it considers [:3] like the lines. Out[12]: array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]]) In [13]: arr2 = arr[:3] In [14]: arr2 Out[14]: array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]]) In [15]: arr2[:] = 100 In [16]: arr2 Out[16]: array([[100, 100, 100, 100, 100, 100, 100, 100, 100, 100], [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]]) In [17]: arr # an alteraiton on arr2 made alterations here too Out[17]: array([[100, 100, 100, 100, 100, 100, 100, 100, 100, 100], [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], [ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]]) In [18]: arr2 = arr[:3].copy() In [19]: arr2 Out[19]: array([[100, 100, 100, 100, 100, 100, 100, 100, 100, 100], [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]]) In [20]: arr[1:4,5:] Out[20]: array([[100, 100, 100, 100, 100], [100, 100, 100, 100, 100], [ 35, 36, 37, 38, 39]]) In [21]: arr > 50 Out[21]: array([[ True, True, True, True, True, True, True, True, True, True], [ True, True, True, True, True, True, True, True, True, True], [ True, True, True, True, True, True, True, True, True, True], [False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False]]) In [22]: bol = arr > 50 In [23]: arr[bol] Out[23]: array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]) array = np.linspace(0, 100, 30) In [24]: bol = arr > 50 In [25]: array.shape Out[25]: (30,) In [26]: array = array.reshape(3, 10) In [27]: array Out[27]: array([[ 0. , 3.44827586, 6.89655172, 10.34482759, 13.79310345, 17.24137931, 20.68965517, 24.13793103, 27.5862069 , 31.03448276], [ 34.48275862, 37.93103448, 41.37931034, 44.82758621, 48.27586207, 51.72413793, 55.17241379, 58.62068966, 62.06896552, 65.51724138], [ 68.96551724, 72.4137931 , 75.86206897, 79.31034483, 82.75862069, 86.20689655, 89.65517241, 93.10344828, 96.55172414, 100. ]]) In [28]: array[0:2, 2] Out[28]: array([ 6.89655172, 41.37931034]) Opera\u00e7\u00f5es com arrays In [1]: arr = np.arange(0, 16) In [2]: arr Out[2]: array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) In [3]: arr + arr Out[3]: array([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) In [4]: arr * arr Out[4]: array([ 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225]) In [5]: arr/arr # division by 0 Out[5]: array([nan, 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]) Warning: RuntimeWarning: invalid value encountered in true_divide In [6]:1 / arr Out[6]: array([ inf, 1. , 0.5 , 0.33333333, 0.25 , 0.2 , 0.16666667, 0.14285714, 0.125 , 0.11111111, 0.1 , 0.09090909, 0.08333333, 0.07692308, 0.07142857, 0.06666667]) Warning: RuntimeWarning: divide by zero encountered in true_divide In [7]: arr + 100 Out[7]: array([100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) In [8]: np.sqrt(arr) Out[8]: array([0. , 1. , 1.41421356, 1.73205081, 2. , 2.23606798, 2.44948974, 2.64575131, 2.82842712, 3. , 3.16227766, 3.31662479, 3.46410162, 3.60555128, 3.74165739, 3.87298335]) In [9]: np.exp(arr) Out[9]: array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01, 5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03, 2.98095799e+03, 8.10308393e+03, 2.20264658e+04, 5.98741417e+04, 1.62754791e+05, 4.42413392e+05, 1.20260428e+06, 3.26901737e+06]) In [10]: np.mean(arr) Out[10]: 7.5 In [11]: np.sin(arr) # sine/seno Out[11]: array([ 0. , 0.84147098, 0.90929743, 0.14112001, -0.7568025 , -0.95892427, -0.2794155 , 0.6569866 , 0.98935825, 0.41211849, -0.54402111, -0.99999021, -0.53657292, 0.42016704, 0.99060736, 0.65028784]) In [12]: np.max(arr) Out[12]: 15 In [13]: arr.max() Out[13]: 15","title":"Numpy"},{"location":"python/#pandas","text":"Series In [1]: import pandas as pd # importando o pacote In [2]: labels = ['a', 'b', 'c'] my_list = [10, 20, 30] arr = np.array([10, 20, 30]) d = {'a': 10, 'b': 20, 'c': 30} In [3]: pd.Series(data= my_list, index = labels) Out[3]: a 10 b 20 c 30 In [4]: series = pd.Series(data= my_list, index = labels) In [5]: series['a'] Out[5]: 10 In [6]: pd.Series(labels, my_list) Out[6]: 10 a 20 b 30 c In [7]: ser1 = pd.Series([1, 2, 3, 4], index = ['EUA', 'Alemanha', 'URSS', 'Jap\u00e3o']) In [8]: ser2 = pd.Series([1, 2, 3, 4], index = ['EUA', 'Alemanha', 'It\u00e1lia', 'Jap\u00e3o']) In [9]: ser2 Out[9]: EUA 1 Alemanha 2 It\u00e1lia 3 Jap\u00e3o 4 In [10]: ser1 + ser2 Out[10]: Alemanha 4.0 EUA 2.0 It\u00e1lia NaN Jap\u00e3o 8.0 URSS NaN Dataframe: creation and slicing In [2]: np.random.seed(101) In [2]: df = pd.DataFrame(np.random.randn(5, 4), index = 'A B C D E'.split(), columns = 'W X Y Z'.split()) In [3]: df Out[2]: W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 In [2]: df['W'] Out[2]: A 2.706850 B 0.651118 C -2.018168 D 0.188695 E 0.190794 In [2]: type(df['W']) Out[2]: pandas.core.series.Series In [2]: df[['W', 'Z']] Out[2]: W Z A 2.706850 0.503826 B 0.651118 0.605965 C -2.018168 -0.589001 D 0.188695 0.955057 E 0.190794 0.683509 In [2]: df['new'] = df['W'] + df['Z'] In []: df Out[2]: W X Y Z new A 2.706850 0.628133 0.907969 0.503826 3.210676 B 0.651118 -0.319318 -0.848077 0.605965 1.257083 C -2.018168 0.740122 0.528813 -0.589001 -2.607169 D 0.188695 -0.758872 -0.933237 0.955057 1.143752 E 0.190794 1.978757 2.605967 0.683509 0.874303 In [2]: df.drop('new', axis = 1) Out[2]: W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 In [2]: df Out[2]: W X Y Z new A 2.706850 0.628133 0.907969 0.503826 3.210676 B 0.651118 -0.319318 -0.848077 0.605965 1.257083 C -2.018168 0.740122 0.528813 -0.589001 -2.607169 D 0.188695 -0.758872 -0.933237 0.955057 1.143752 E 0.190794 1.978757 2.605967 0.683509 0.874303 In [2]: df.drop('new', axis = 1, inplace = True) # apply directly on dataframe In [2]: df Out[2]: W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 In [2]: df.loc['A', 'W'] Out[2]: 2.706849839399938 In [2]: df.loc[['A', 'B'], ['X', 'Y', 'Z']] # name index Out[2]: X Y Z A 0.628133 0.907969 0.503826 B -0.319318 -0.848077 0.605965 In [2]: df.iloc[1:4, 2:] # index Out[2]: Y Z B -0.848077 0.605965 C 0.528813 -0.589001 D -0.933237 0.955057 Dataframe: conditional selecting, set_index In [2]: from numpy.random import randn np.random.seed(101) In [2]: df = pd.DataFrame(randn(5,4), index = 'A B C D E'.split(), columns = 'W X Y Z'.split()) df Out[2]: W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 C -2.018168 0.740122 0.528813 -0.589001 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 In [2]: df > 0 Out[2]: W X Y Z A True True True True B True False False True C False True True False D True False False True E True True True True In [2]: bol = df > 0 In [2]: df[bol] Out[2]: W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 NaN NaN 0.605965 C NaN 0.740122 0.528813 NaN D 0.188695 NaN NaN 0.955057 E 0.190794 1.978757 2.605967 0.683509 In [2]: df[df['W'] > 0] Out[2]: W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 In [2]: df[df['W'] > 0]['Y'] Out[2]: A 0.907969 B -0.848077 D -0.933237 E 2.605967 In [2]: df[(df['W'] > 0) & (df['Y'] > 1)] # & can deal with series while 'and' can't Out[2]: W X Y Z E 0.190794 1.978757 2.605967 0.683509 In [2]: df[(df['W'] > 0) | (df['Y'] > 1)] Out[2]: W X Y Z A 2.706850 0.628133 0.907969 0.503826 B 0.651118 -0.319318 -0.848077 0.605965 D 0.188695 -0.758872 -0.933237 0.955057 E 0.190794 1.978757 2.605967 0.683509 In [2]: df.reset_index(inplace = True) df Out[2]: index W X Y Z 0 A 2.706850 0.628133 0.907969 0.503826 1 B 0.651118 -0.319318 -0.848077 0.605965 2 C -2.018168 0.740122 0.528813 -0.589001 3 D 0.188695 -0.758872 -0.933237 0.955057 4 E 0.190794 1.978757 2.605967 0.683509 In [2]: col = 'RS RJ SP AM SC'.split() col Out[2]: ['RS', 'RJ', 'SP', 'AM', 'SC'] In [2]: df['State'] = col df Out[2]: index W X Y Z State Estado RS A 2.706850 0.628133 0.907969 0.503826 RS RJ B 0.651118 -0.319318 -0.848077 0.605965 RJ SP C -2.018168 0.740122 0.528813 -0.589001 SP AM D 0.188695 -0.758872 -0.933237 0.955057 AM SC E 0.190794 1.978757 2.605967 0.683509 SC In [2]: df.set_index('State', inplace = True) # defining State as index df Out[2]: index W X Y Z Estado RS A 2.706850 0.628133 0.907969 0.503826 RJ B 0.651118 -0.319318 -0.848077 0.605965 SP C -2.018168 0.740122 0.528813 -0.589001 AM D 0.188695 -0.758872 -0.933237 0.955057 SC E 0.190794 1.978757 2.605967 0.683509 Groupby In [2]: data = {'Company': ['GOOG', 'GOOG', 'MSFT', 'MSFT', 'FB', 'FB'], 'Name': ['Sam', 'Charlie', 'Amy', 'Vanessa', 'Carl', 'Sarah'], 'Sales': [200, 120, 340, 124, 243, 350]} In [2]: df = pd.DataFrame(data) df Out[2]: Company Name Sales 0 GOOG Sam 200 1 GOOG Charlie 120 2 MSFT Amy 340 3 MSFT Vanessa 124 4 FB Carl 243 5 FB Sarah 350 In [2]: group = df.groupby('Company') group.sum() Out[2]: Sales Company FB 593 GOOG 320 MSFT 464 In [2]: group.describe() Out[2]: Sales count mean std min 25% 50% 75% max Company FB 2.0 296.5 75.660426 243.0 269.75 296.5 323.25 350.0 GOOG 2.0 160.0 56.568542 120.0 140.00 160.0 180.00 200.0 MSFT 2.0 232.0 152.735065 124.0 178.00 232.0 286.00 340.0 In [2]: group2 = df.groupby('Name') group2.sum() Out[2]: Sales Name Amy 340 Carl 243 Charlie 120 Sam 200 Sarah 350 Vanessa 124","title":"Pandas"},{"location":"python/#seaborn","text":"In [2]: import seaborn as sns # importando o pacote %matplotlib inline # para plotagem dos gr\u00e1ficos Distribution plots In [1]: tips = sns.load_dataset('tips') # carregando um conjunto de dados de exemplo tips.info() Out[1]: <class 'pandas.core.frame.DataFrame'> RangeIndex: 244 entries, 0 to 243 Data columns (total 7 columns): total_bill 244 non-null float64 tip 244 non-null float64 sex 244 non-null category smoker 244 non-null category day 244 non-null category time 244 non-null category size 244 non-null int64 dtypes: category(4), float64(2), int64(1) memory usage: 7.2 KB In [2]: tips.head() # para ver as 5 primeiras linhas do conjunto de dados Out[2]: total_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4 In [3]: sns.distplot(tips['total_bill'], kde = False, bins = 30); # bins = number of bars Out[3]: In [4]: sns.jointplot(x = 'total_bill', y = 'tip', data = tips, kind = 'reg'); Out[4]: In [5]: sns.jointplot('total_bill', 'tip', data = tips); Out[5]: 3 In [6]: sns.jointplot('total_bill', 'tip', data = tips, kind = 'hex'); Out[6]: 4 In [7]: sns.pairplot(tips, hue = 'sex'); Out[7]: 5 In [8]: sns.pairplot(tips, hue = 'sex', palette = 'coolwarm'); Out[8]: 6 Categorical plots In [1]: sns.barplot('sex', 'total_bill', data = tips, estimator = np.std); Out[1]: 8 In [2]: sns.boxplot('day', 'total_bill', data = tips, palette = 'rainbow', hue = 'sex'); Out[2]: 10 In [3]: sns.boxplot(data = tips, palette = 'rainbow', orient = 'h'); Out[3]: In [4]: sns.violinplot('day', 'tip', data = tips); Out[4]: In [5]: sns.violinplot('day', 'tip', data = tips, hue = 'sex'); Out[5]: In [6]: sns.violinplot('day', 'tip', data = tips, hue = 'sex', split = True); Out[6]: In [7]: sns.stripplot('day', 'total_bill', data = tips); Out[7]: In [8]: sns.stripplot('day', 'total_bill', data = tips, jitter = True, hue = 'sex'); Out[8]: In [9]: sns.stripplot('day', 'total_bill', data = tips, jitter = True, hue = 'sex', dodge = True); Out[9]: In [11]: sns.swarmplot('day', 'total_bill', data = tips, color = 'black') sns.violinplot('day', 'total_bill', data = tips); Out[11]: In [12]: sns.catplot('sex', 'total_bill', data = tips, kind = 'bar'); # antigo factorplot Out[12]: Plots matriciais In [1]: flights = sns.load_dataset('flights') tips = sns.load_dataset('tips') ```python In [2]: crr = tips.corr() In [3]: sns.heatmap(crr, cmap = 'coolwarm', annot = True); Out[3]: sb 20 In [4]: pf = flights.pivot_table(values = 'passengers', index = 'month', columns = 'year'); In [5]: sns.heatmap(pf, cmap = 'YlGnBu', linecolor = 'w', lw = '1'); Out[5]: In [6]: sns.clustermap(pf, standard_scale = 1); Out[6]: Plots de regress\u00e3o In [1]: tips = sns.load_dataset('tips') In [2]: sns.lmplot('total_bill', 'tip', data = tips, hue = 'sex', palette = 'coolwarm'); Out[2]: sb 23 In [3]: sns.lmplot('total_bill', 'tip', data = tips, hue = 'sex', markers = ['o', 'v']); Out[3]: ![seaborn-24](img/seaborn/seaborn-24.png) In [4]: sns.lmplot('total_bill', 'tip', data = tips, hue = 'sex', markers = ['o', 'v'], scatter_kws = {'s': 100}); Out[4]: In [5]: sns.lmplot('total_bill', 'tip', data = tips, hue = 'sex', col = 'sex', row = 'time'); Out[5]: In [6]: sns.lmplot('total_bill', 'tip', data = tips, hue = 'sex', col = 'day', aspect = 0.6, height = 8); Out[6]: Pair grids In [1]: iris = sns.load_dataset('iris') In [2]: iris['species'].value_counts() Out[2]: virginica 50 versicolor 50 setosa 50 In [2]: g = sns.PairGrid(iris) g.map(plt.scatter); Out[2]: In [2]: g = sns.PairGrid(iris) g.map_diag(plt.hist) g.map_upper(plt.scatter) g.map_lower(sns.kdeplot); Out[2]: In [2]: sns.pairplot(iris, hue = 'species'); Out[2]: In [2]: tips = sns.load_dataset('tips') In [2]: g = sns.FacetGrid(tips, col = 'time', row = 'smoker') g.map(plt.hist, 'total_bill'); Out[2]:","title":"Seaborn"}]}